 @inject IStore store
  @inject State state

 <div class="content">
     <div class="col-1">
        @if(state.HeaderArray.Value.Count > 0) 
        {
            <div class="dynamic-table">
                <div class="table-header">
                    <h3 class="heading">@TableTiltle</h3>
                    <bold>@dataCount data points</bold>
                </div>
                    <div class="table large">
                    <div class="table-body">
                        <table>
                            <thead>
                                @foreach(var row in state.HeaderArray.Value)
                                {
                                    <tr>
                                        @foreach(var data in row)
                                        {
                                            if(!string.IsNullOrWhiteSpace(data))
                                            {
                                                <th>@data</th>
                                            }
                                        }
                                    </tr>
                                }
                            </thead>
                            <tbody>
                                @if(data2show == "raw")
                                {
                                foreach(var row in dataArray)
                                {
                                    int index = 0;
                                    <tr>
                                        @foreach(var data in row)
                                        {
                                            string xDepth = row[0];
                                            if(!string.IsNullOrWhiteSpace(data) && headerIndexDict.ContainsKey(index))
                                            {
                                                <td>@data</td>
                                            }
                                            else
                                            {
                                                <td class="red">@data</td>
                                            }
                                            index++;
                                        }
                                    </tr>
                                }
                                }
                                else if(data2show == "filtered")
                                {
                                    foreach(var row in filteredRawDataInRowsArray)
                                    {
                                        int index = 0;
                                        <tr>
                                            @foreach(var data in row)
                                            {
                                                if(state.HeaderIndexDict.Value.ContainsKey(index))
                                                {
                                                    <td>@data</td>
                                                }
                                                else
                                                {
                                                    <td class="red">@data</td>
                                                }
                                                index++;
                                            }
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }     
    </div>
    
    <div class="col-2" id="chart1">
        <BlazorPlotView Model="@coneModel" Width="200" Height="565" />
        <BlazorPlotView Model="@sleeveModel" Width="200" Height="565" />
        <BlazorPlotView Model="@poreModel" Width="200" Height="565" />
    </div>
 </div>

 @code{
    [Parameter]
    public string TableTiltle {get;set;} = "";
    [Parameter]
    public Dictionary<int,string> headerIndexDict {get; set;} = new();
    Dictionary<int, List<double>> rawDataDict = new Dictionary<int, List<double>>();
    private List<string[]> dataArray {get; set;} = new();
    public PlotModel coneModel = new PlotModel();
    public PlotModel sleeveModel = new PlotModel();
    public PlotModel poreModel = new PlotModel(); 
    LinearAxis coneXAxis = new LinearAxis();
    LinearAxis coneYAxis = new LinearAxis();
    LineSeries coneSeries = new LineSeries();
    LinearAxis sleeveXAxis = new LinearAxis();
    LinearAxis sleeveYAxis = new LinearAxis();
    LineSeries sleeveSeries = new LineSeries();
    LinearAxis poreXAxis = new LinearAxis();
    LinearAxis poreYAxis = new LinearAxis();
    LineSeries poreSeries = new LineSeries();
    string data2show = "raw";
    int dataCount = 0;
    List<double[]> filteredRawDataInRowsArray = new List<double[]>();
    protected override void OnInitialized()
    {
        InitializePlotModels();
        //Console.WriteLine($"H A {state.HeaderArray.Value.Count} {headerArray.Count} {dataArray.Count}");
    }
    protected override void OnAfterRender(bool firstRender)
    {
    }

    public void ViewRawData(List<string[]> _dataArray)
    {
        if(_dataArray.Count > 0)
        {
            InitializePlotModels();
            data2show = "raw";
            dataArray = _dataArray;
            dataCount = dataArray.Count;
            foreach(var row in _dataArray)
            {
                int index = 0;               
                foreach(var item in row)
                {
                    string xDepth = row[0];
                    double value = 0; double depth = 0;
                    if(double.TryParse(xDepth, out depth) && double.TryParse(item, out value))
                    {
                        var x = value; var y = depth;
                        if(index != 0 && state.HeaderIndexDict.Value.ContainsKey(index))
                        {
                            if(index == 1)//tip resistance
                            {
                                coneSeries.Points.Add(new DataPoint(x,y));
                            }
                            else if(index == 2)
                            {
                                sleeveSeries.Points.Add(new DataPoint(x,y));
                            }
                            else if(index == 3)
                            {
                                poreSeries.Points.Add(new DataPoint(x,y));
                            }
                        }
                    }
                    index++;
                }
            }
        }
        //Console.WriteLine($"{_dataArray.Count} : {dataArray.Count} : {dataCount} viewing raw data");
        //InvokeAsync(StateHasChanged);
    }
    public void ViewFilteredData(List<double[]> filteredRow, Dictionary<int, List<double>> filteredCol)
    {
        if(filteredCol.ContainsKey(0) && filteredCol.ContainsKey(1) && filteredCol.ContainsKey(2) && filteredCol.ContainsKey(3))
        {
            InitializePlotModels();
            filteredRawDataInRowsArray = filteredRow;
            dataCount = filteredRawDataInRowsArray.Count;
            data2show = "filtered";
            List<double> depth = filteredCol[0];
            List<double> coneR = filteredCol[1];
            List<double> sf = filteredCol[2];
            List<double> pp = filteredCol[3]; 

            for(int i = 0; i < coneR.Count; i++)
            {
                coneSeries.Points.Add(new DataPoint(coneR[i],depth[i]));
                sleeveSeries.Points.Add(new DataPoint(sf[i],depth[i]));
                poreSeries.Points.Add(new DataPoint(pp[i],depth[i]));
            }
        }
    }
    /*private bool ParseAndPopulateData(int index,string xDepth, string val)
    {
        double value = 0;
        double depth = 0;
        bool isValueValid = false;
        if(double.TryParse(xDepth, out depth) && double.TryParse(val, out value))
        {
            isValueValid = true;
            if(index != 0)
            {
               GenerateDynamicPlot(index, value, depth);//plot of Penetration against depth
            }
        }
        else
        {
            isValueValid = false;
            value = 0;
        }
        return isValueValid;
    }
    */
    /*chart display codes here*/
    public void InitializePlotModels()
    {
       coneModel = new PlotModel {  Title = "Tip Resistance,MPa"};
       sleeveModel = new PlotModel { Title = "Sleeve Friction,MPa"};
       poreModel = new PlotModel { Title = "Pore Pressure,MPa"};

        /*Initializing cone model*/ 
       coneXAxis = new LinearAxis(){Position = AxisPosition.Top, StartPosition = 0, EndPosition = 1,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Penetration (MPa)"};
       coneModel.Axes.Add(coneXAxis);
       var coneYAxis = new LinearAxis(){Position = AxisPosition.Left, StartPosition = 1, EndPosition = 0,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Depth (m)"};
       coneModel.Axes.Add(coneYAxis);
       coneSeries = new LineSeries
        {
            Title = "cone",
            MarkerType = MarkerType.Circle,
            MarkerSize = 1,
            Color = OxyColors.Red,
            StrokeThickness = 2
        };
        coneModel.Series.Add(coneSeries);

        /*Initializing sleeve model*/ 
        sleeveXAxis = new LinearAxis(){Position = AxisPosition.Top, StartPosition = 0, EndPosition = 1,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Penetration (MPa)"};
        sleeveModel.Axes.Add(sleeveXAxis);
        sleeveYAxis = new LinearAxis(){Position = AxisPosition.Left, StartPosition = 1, EndPosition = 0,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Depth (m)"};
        sleeveModel.Axes.Add(sleeveYAxis);
        sleeveSeries = new LineSeries
        {
            Title = "sleeve",
            MarkerType = MarkerType.Circle,
            Color = OxyColors.Blue,
            MarkerSize = 1,
            StrokeThickness = 2
        };
        sleeveModel.Series.Add(sleeveSeries);

        /*Initializing pore pressure model*/ 
       poreXAxis = new LinearAxis(){Position = AxisPosition.Top, StartPosition = 0, EndPosition = 1,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Penetration (MPa)"};
       poreModel.Axes.Add(poreXAxis);
       poreYAxis = new LinearAxis(){Position = AxisPosition.Left, StartPosition = 1, EndPosition = 0,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Depth (m)"};
       poreModel.Axes.Add(poreYAxis);
       poreSeries = new LineSeries
        {
            Title = "pore pressure",
            MarkerType = MarkerType.Circle,
            Color = OxyColor.Parse("#00FF00"),
            MarkerSize = 1,
            StrokeThickness = 2
        };
        poreModel.Series.Add(poreSeries);
    }
    private void GenerateDynamicPlot(int index, double x, double y)
    {
        if(state.HeaderIndexDict.Value.ContainsKey(index))
        {
            if(index == 1)//tip resistance
            {
                coneSeries.Points.Add(new DataPoint(x,y));
                coneModel.InvalidatePlot(true);
            }
            else if(index == 2)
            {
                sleeveSeries.Points.Add(new DataPoint(x,y));
                sleeveModel.InvalidatePlot(true);
            }
            else if(index == 3)
            {
                poreSeries.Points.Add(new DataPoint(x,y));
                poreModel.InvalidatePlot(true);
            }
        }

    }




}
