 @inject IStore store
  @inject State state
  @inject IFunctions function

 <div class="content">
     <div class="col-1">
        @if(state.HeaderArray.Value.Count > 0 && data2show != "") 
        {
            <div class="dynamic-table">
                <div class="table-header">
                    <h3 class="heading">@TableTiltle</h3>
                    <bold>@dataCount data points</bold>
                </div>
                    <div class="table large">
                    <div class="table-body">
                        <table>
                            <thead>
                                @if(data2show == "processed" && state.HeaderIndexDict.Value.Count() > 0)
                                {
                                    <tr>
                                    @foreach(var kvp in state.HeaderIndexDict.Value)
                                    {
                                            @if(!string.IsNullOrWhiteSpace(kvp.Value) && state.HeaderUnitDict.Value.ContainsKey(kvp.Key))
                                            {
                                                string header = $"{kvp.Value} \n  {state.HeaderUnitDict.Value[kvp.Key]}";
                                                <th>@header</th>
                                            }
                                    }
                                    </tr>
                                }
                                else
                                {
                                    foreach(var row in state.HeaderArray.Value)
                                    {
                                        <tr>
                                            @foreach(var data in row)
                                            {
                                                if(!string.IsNullOrWhiteSpace(data))
                                                {
                                                    <th>@data</th>
                                                }
                                            }
                                        </tr>
                                    }
                                }
                            </thead>
                            <tbody>
                                @if(data2show == "raw" || data2show == "decay")
                                {
                                foreach(var row in dataArray)
                                {
                                    int index = 0;
                                    <tr>
                                        @foreach(var data in row)
                                        {
                                            string xDepth = row[0];
                                            if(!string.IsNullOrWhiteSpace(data) && headerIndexDict.ContainsKey(index))
                                            {
                                                <td>@data</td>
                                            }
                                            else
                                            {
                                                <td class="red">@data</td>
                                            }
                                            index++;
                                        }
                                    </tr>
                                }
                                }
                                else if(data2show == "filtered")
                                {
                                    foreach(var row in filteredRawDataInRowsArray)
                                    {
                                        int index = 0;
                                        <tr>
                                            @foreach(var data in row)
                                            {
                                                if(state.HeaderIndexDict.Value.ContainsKey(index))
                                                {
                                                    <td>@data</td>
                                                }
                                                else
                                                {
                                                    <td class="red">@data</td>
                                                }
                                                index++;
                                            }
                                        </tr>
                                    }
                                }
                                else if(data2show == "processed" && state.FilteredAndComputedCPTDataInColumnsDict.Value.Count() > 0)
                                {
                                    var data = state.FilteredAndComputedCPTDataInColumnsDict.Value;
                                    int maxDataCount = data.Values.Max(list => list.Count);
                                    for(int i = 0; i < maxDataCount; i++)
                                    {
                                        <tr>
                                            @foreach(var columnOfData in data.Values)
                                            {
                                                if(i < columnOfData.Count)
                                                {
                                                    <td>@columnOfData[i]</td>
                                                }
                                            }
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        } 
    </div>
    
    @if(data2show == "decay")
    {
        <div class="col-2" id="chart1">
            <BlazorPlotView Model="@poreLogDecayModel" Width="360" Height="280" />
            <BlazorPlotView Model="@poreRootDecayModel" Width="360" Height="280" />
            <BlazorPlotView Model="@coneLogDecayModel" Width="360" Height="280" />
            <BlazorPlotView Model="@coneRootDecayModel" Width="360" Height="280" />
        </div>
    }
    else
    {
        <div class="col-2" id="chart1">
            <BlazorPlotView Model="@coneModel" Width="180" Height="565" />
            <BlazorPlotView Model="@sleeveModel" Width="180" Height="565" />
            <BlazorPlotView Model="@poreModel" Width="180" Height="565" />
            <BlazorPlotView Model="@rfModel" Width="180" Height="565" />
        </div>
    }
 </div>

 @code{
    [Parameter]
    public string TableTiltle {get;set;} = "";
    [Parameter]
    public Dictionary<int,string> headerIndexDict {get; set;} = new();
    Dictionary<int, List<double>> rawDataDict = new Dictionary<int, List<double>>();
    private List<string[]> dataArray {get; set;} = new();
    public PlotModel coneModel = new PlotModel();
    public PlotModel sleeveModel = new PlotModel();
    public PlotModel poreModel = new PlotModel(); 
    public PlotModel rfModel = new PlotModel(); 
    public PlotModel poreLogDecayModel = new PlotModel();
    public PlotModel poreRootDecayModel = new PlotModel();  
    public PlotModel coneLogDecayModel = new PlotModel();
    public PlotModel coneRootDecayModel = new PlotModel();  
    LinearAxis coneXAxis = new LinearAxis();
    LinearAxis coneYAxis = new LinearAxis();
    LineSeries coneSeries = new LineSeries();
    LinearAxis sleeveXAxis = new LinearAxis();
    LinearAxis sleeveYAxis = new LinearAxis();
    LineSeries sleeveSeries = new LineSeries();
    LinearAxis poreXAxis = new LinearAxis();
    LinearAxis poreYAxis = new LinearAxis();
    LineSeries poreSeries = new LineSeries();
    LinearAxis rfXAxis = new LinearAxis();
    LinearAxis rfYAxis = new LinearAxis();
    LineSeries rfSeries = new LineSeries();
    LogarithmicAxis poreLogXAxis = new LogarithmicAxis();
    LinearAxis poreLogYAxis = new LinearAxis();
    LineSeries poreLogSeries = new LineSeries();
    LinearAxis poreRootXAxis = new LinearAxis();
    LinearAxis poreRootYAxis = new LinearAxis();
    LineSeries poreRootSeries = new LineSeries();
    LogarithmicAxis coneLogXAxis = new LogarithmicAxis();
    LinearAxis coneLogYAxis = new LinearAxis();
    LineSeries coneLogSeries = new LineSeries();
    LinearAxis coneRootXAxis = new LinearAxis();
    LinearAxis coneRootYAxis = new LinearAxis();
    LineSeries coneRootSeries = new LineSeries();
    string data2show = "raw";
    int dataCount = 0;
    List<double[]> filteredRawDataInRowsArray = new List<double[]>();
    //List<double[]> computedProcessedDataArray = new List<double[]>();
    ScatterSeries cone2Series = new ScatterSeries();
    protected override void OnInitialized()
    {
        InitializePlotModels();
        InitializeDecayPlotModels();
    }

    public void ViewRawData(List<string[]> _dataArray)
    {
        if(_dataArray.Count > 0)
        {
            data2show = "raw";
            InitializePlotModels();
            dataArray = _dataArray;
            dataCount = dataArray.Count;
            foreach(var row in _dataArray)
            {
                int index = 0; 
                double qc = 0;//for raw data
                double fs = 0;//Rf(%) = fs/qc              
                foreach(var item in row)
                {
                    string xDepth = row[0];
                    double value = 0; double depth = 0;
                    if(double.TryParse(xDepth, out depth) && double.TryParse(item, out value))
                    {
                        var x = value;
                        var y = depth;
                        if(index != 0 && state.HeaderIndexDict.Value.ContainsKey(index))
                        {
                            if(index == 1)//tip resistance
                            {
                                qc = x;
                                coneSeries.Points.Add(new DataPoint(x,y));
                            }
                            else if(index == 2)
                            {
                                fs = x;
                                if(fs > 0 && qc > 0)
                                {
                                    double rf = (fs/qc) * 100;
                                    rfSeries.Points.Add(new DataPoint(rf,y));
                                }
                                sleeveSeries.Points.Add(new DataPoint(x,y));
                            }
                            else if(index == 3)
                            {
                                poreSeries.Points.Add(new DataPoint(x,y));
                            }
                        }
                    }
                    index++;
                }
            }
        }
    }
    public void ViewDataDecay(List<string[]> _dataArray)
    {
        if(_dataArray.Count > 0)
        {
            InitializeDecayPlotModels();
            data2show = "decay";
            dataArray = _dataArray;
            dataCount = dataArray.Count;
            foreach(var row in _dataArray)
            {
                if(row.Length > 0)
                {
                    int index = 0; 
                    string rawTime = row[row.Length - 1];            
                    foreach(var item in row)
                    {
                        double value = 0; double timeInSeconds = 0;
                        if(double.TryParse(rawTime, out timeInSeconds) && double.TryParse(item, out value))
                        {
                            double xTimeInMinutes = timeInSeconds / 60; 
                            var yDecay = value;
                            if(index != 0 && state.HeaderIndexDict.Value.ContainsKey(index))
                            {
                                if(index == 1)//tip resistance decay
                                {
                                    coneLogSeries.Points.Add(new DataPoint(Math.Log10(xTimeInMinutes),yDecay));
                                    coneRootSeries.Points.Add(new DataPoint(Math.Sqrt(xTimeInMinutes),yDecay));
                                }
                                else if(index == 3)//pore presure decay
                                {
                                    poreLogSeries.Points.Add(new DataPoint(Math.Log10(xTimeInMinutes),yDecay));
                                    poreRootSeries.Points.Add(new DataPoint(Math.Sqrt(xTimeInMinutes),yDecay));
                                }
                            }
                        }
                        index++;
                    }
                }
            }
        }
    }
    public void ViewFilteredData(List<double[]> filteredRow, Dictionary<int, List<double>> filteredCol)
    {
        if(filteredCol.ContainsKey(0) && filteredCol.ContainsKey(1) && filteredCol.ContainsKey(2) && filteredCol.ContainsKey(3))
        {
            data2show = "filtered";
            InitializePlotModels();
            filteredRawDataInRowsArray = filteredRow;
            dataCount = filteredRawDataInRowsArray.Count;
            List<double> rfList = new List<double>();
            List<double> depth = filteredCol[0];
            List<double> coneR = filteredCol[1];
            List<double> sf = filteredCol[2];
            List<double> pp = filteredCol[3]; 

            double coneXMin = Math.Round(coneR.Min(),1); double coneXMax = Math.Round(coneR.Max(),1);
            coneXAxis.Minimum = coneXMin; coneXAxis.Maximum = coneXMax;

            //double sfXMin = Math.Round(sf.Min(),1); double sfXMax = Math.Round(sf.Max(),1);
            //sleeveXAxis.Minimum = sfXMin;
            //sleeveXAxis.Maximum = sfXMax;

           // poreXAxis.Minimum = Math.Round(pp.Min(),1); poreXAxis.Maximum = Math.Round(pp.Max(),1);

            //coneXAxis.Minimum = function.RoundNumber(coneR.Min());
            //coneXAxis.Maximum = function.RoundNumber(coneR.Max());
            poreXAxis.Minimum = function.RoundNumber(pp.Min());
            poreXAxis.Maximum = function.RoundNumber(pp.Max());

            for(int i = 0; i < coneR.Count; i++)
            {
                double rf = (sf[i] / coneR[i]) * 100;
                rfList.Add(rf);
                coneSeries.Points.Add(new DataPoint(coneR[i],depth[i]));
                sleeveSeries.Points.Add(new DataPoint(sf[i],depth[i]));
                poreSeries.Points.Add(new DataPoint(pp[i],depth[i]));
            }

            //rfXAxis.Minimum = Math.Round(rfList.Min(),1); rfXAxis.Maximum = Math.Round(rfList.Max(),1); 
            rfXAxis.Minimum = function.RoundNumber(rfList.Min());
            rfXAxis.Maximum = function.RoundNumber(rfList.Max()); 
            for(int i = 0; i < depth.Count; i++)
            {
                rfSeries.Points.Add(new DataPoint(rfList[i],depth[i]));
            }
        }
    }
    private void WriteToTable(Dictionary<int,List<double>> data)
    {
        int maxDataCount = data.Values.Max(list => list.Count);
        for(int i = 0; i < maxDataCount; i++)
        {
            foreach(var columnOfData in data.Values)
            {
                if(i < columnOfData.Count)
                {
                    Console.Write($"{columnOfData[i]} ");
                }
            }
        }
    }
    public void ViewProcessedData()
    {
        var computedCol = state.FilteredAndComputedCPTDataInColumnsDict.Value;
        if(computedCol.Count() >= 14)//debug extensively
        {
            data2show = "processed";
            InitializePlotModels();
            dataCount = computedCol[0].Count;
            List<double> depth = computedCol[0];
            List<double> fs = computedCol[2];
            List<double> pp = computedCol[3];//pore pressure filtered
            List<double> qt = computedCol[10];
            List<double> qnet = computedCol[11];
            List<double> Qt = computedCol[12];
            List<double> rf = computedCol[13]; 
            List<double> bq = computedCol[14]; 

            depth = depth.Where(d => d > 0).ToList<double>();

            coneXAxis.Minimum = Math.Round(qt.Min(),1); coneXAxis.Maximum = Math.Round(qt.Max(),1);
            //sleeveXAxis.Minimum = Math.Round(fs.Min(),1); sleeveXAxis.Maximum = Math.Round(fs.Max(),1);

            //rfXAxis.Minimum = Math.Round(rf.Min(),1); rfXAxis.Maximum = Math.Round(rf.Max(),1);
            
             rfXAxis.Minimum = function.RoundNumber(rf.Min());
             rfXAxis.Maximum = function.RoundNumber(rf.Max()); 
            poreXAxis.Minimum = Math.Round(pp.Min(),1); poreXAxis.Maximum = Math.Round(pp.Max(),1);

            for(int i = 0; i < depth.Count; i++)
            {
                coneSeries.Points.Add(new DataPoint(qt[i],depth[i]));
                sleeveSeries.Points.Add(new DataPoint(fs[i],depth[i]));
                rfSeries.Points.Add(new DataPoint(rf[i],depth[i]));
                poreSeries.Points.Add(new DataPoint(pp[i],depth[i]));
            }
        }
    }
    /*chart display codes here*/
    public void InitializePlotModels()
    {
        if(data2show == "processed")
        {
            var cm = ChartInitializer.InitLinear("qt (MPa)",0,1,1,0,"qt (MPa)","Penetration (m)",1, AxisPosition.Top,AxisPosition.Left,OxyColors.DarkRed);
            coneModel = cm.Item1; coneSeries = cm.Item2;coneXAxis = cm.Item3; coneYAxis = cm.Item4;
            var sm = ChartInitializer.InitLinear("fs (MPa)",0,1,1,0,"fs (MPa)","Penetration (m)",1, AxisPosition.Top,AxisPosition.Left,OxyColors.Blue);
            sleeveModel = sm.Item1; sleeveSeries = sm.Item2; sleeveXAxis = sm.Item3; sleeveYAxis = sm.Item4;
            var pm = ChartInitializer.InitLinear("U2 (MPa)",0,1,1,0,"u2 MPa","Penetration (m)",1, AxisPosition.Top,AxisPosition.Left,OxyColors.DarkGreen);
            poreModel = pm.Item1; poreSeries = pm.Item2; poreXAxis = pm.Item3; poreYAxis = pm.Item4;
            var rfm = ChartInitializer.InitLinear("Rf (%)",0,1,1,0,"Rf (%)","Penetration (m)",1, AxisPosition.Top,AxisPosition.Left,OxyColors.DarkBlue);
            rfModel = rfm.Item1; rfSeries = rfm.Item2; rfXAxis = rfm.Item3; rfYAxis = rfm.Item4;
        }
        else
        {
            var cm = ChartInitializer.InitLinear("Tip Resistance",0,1,1,0,"qc (MPa)","Penetration (m)",1, AxisPosition.Top,AxisPosition.Left,OxyColors.DarkRed);
            coneModel = cm.Item1; coneSeries = cm.Item2; coneXAxis = cm.Item3; coneYAxis = cm.Item4;
            var sm = ChartInitializer.InitLinear("Sleeve Friction",0,1,1,0,"Fs (MPa)","Penetration (m)",1, AxisPosition.Top,AxisPosition.Left,OxyColors.Blue);
            sleeveModel = sm.Item1; sleeveSeries = sm.Item2; sleeveXAxis = sm.Item3; sleeveYAxis = sm.Item4;
            var pm = ChartInitializer.InitLinear("Pore Pressure",0,1,1,0,"u2 (MPa)","Penetration (m)",1, AxisPosition.Top,AxisPosition.Left,OxyColors.DarkGreen);
            poreModel = pm.Item1; poreSeries = pm.Item2; poreXAxis = pm.Item3; poreYAxis = pm.Item4;
            var rfm = ChartInitializer.InitLinear("Friction Ratio (%)",0,1,1,0,"Rf (%)","Penetration (m)",1, AxisPosition.Top,AxisPosition.Left,OxyColors.DarkBlue);
            rfModel = rfm.Item1; rfSeries = rfm.Item2; rfModel = rfm.Item1; rfSeries = rfm.Item2; rfXAxis = rfm.Item3; rfYAxis = rfm.Item4;
        }
    }
        private void InitializeDecayPlotModels()
    {
        var pldm = ChartInitializer.InitLog("Pore Pressure Decay",0,1,0,1,"Log Time (mins)","Pore Pressure (MPa)",1.5, AxisPosition.Bottom,AxisPosition.Left,OxyColors.DarkRed);
        poreLogDecayModel = pldm.Item1; poreLogSeries = pldm.Item2;
        var prdm = ChartInitializer.InitLog("Pore Pressure Decay",0,1,0,1,"Root Time (mins ^ 0.5)","Pore Pressure (MPa)",1.5, AxisPosition.Bottom,AxisPosition.Left,OxyColors.DarkBlue);
        poreRootDecayModel = prdm.Item1;poreRootSeries = prdm.Item2;
        var cldm = ChartInitializer.InitLog("Tip Resistance Decay",0,1,0,1,"Log Time (mins)","Tip Resistance(MPa)",1.5, AxisPosition.Bottom,AxisPosition.Left,OxyColors.DarkGoldenrod);
        coneLogDecayModel = cldm.Item1; coneLogSeries = cldm.Item2;
        var crdm = ChartInitializer.InitLog("Tip Resistance Decay",0,1,0,1,"Root Time (mins ^ 0.5)","Tip Resistance Pressure (MPa)",1.5, AxisPosition.Bottom,AxisPosition.Left,OxyColors.DarkGreen);
        coneRootDecayModel = crdm.Item1; coneRootSeries = crdm.Item2;
    }
    
    public void InitializePlotModelsObsolete()
    {
       coneModel = new PlotModel {  Title = "Cone Resistance"};
       sleeveModel = new PlotModel { Title = "Sleeve Friction"};
       poreModel = new PlotModel { Title = "Pore Pressure"};
       rfModel = new PlotModel { Title = "Friction Ratio"};

        /*Initializing cone model*/ 
       coneXAxis = new LinearAxis(){Position = AxisPosition.Top, StartPosition = 0, EndPosition = 1,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "qc (MPa)"};
       coneModel.Axes.Add(coneXAxis);
       coneYAxis = new LinearAxis(){Position = AxisPosition.Left, StartPosition = 1, EndPosition = 0,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Depth (m)"};
       coneModel.Axes.Add(coneYAxis);
       coneSeries = new LineSeries
        {
            Title = "cone",
            MarkerType = MarkerType.Circle,
            MarkerSize = 1,
            Color = OxyColors.Red,
            StrokeThickness = 2
        };
        coneModel.Series.Add(coneSeries);

        /*Initializing sleeve model*/ 
        sleeveXAxis = new LinearAxis(){Position = AxisPosition.Top, StartPosition = 0, EndPosition = 1,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Fs (MPa)"};
        sleeveModel.Axes.Add(sleeveXAxis);
        sleeveYAxis = new LinearAxis(){Position = AxisPosition.Left, StartPosition = 1, EndPosition = 0,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Depth (m)"};
        sleeveModel.Axes.Add(sleeveYAxis);
        sleeveSeries = new LineSeries
        {
            Title = "sleeve",
            MarkerType = MarkerType.Circle,
            Color = OxyColors.Blue,
            MarkerSize = 1,
            StrokeThickness = 2
        };
        sleeveModel.Series.Add(sleeveSeries);

        /*Initializing pore pressure model*/ 
       poreXAxis = new LinearAxis(){Position = AxisPosition.Top, StartPosition = 0, EndPosition = 1,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "u2 (MPa)"};
       poreModel.Axes.Add(poreXAxis);
       poreYAxis = new LinearAxis(){Position = AxisPosition.Left, StartPosition = 1, EndPosition = 0,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Depth (m)"};
       poreModel.Axes.Add(poreYAxis);
       poreSeries = new LineSeries
        {
            Title = "pore pressure",
            MarkerType = MarkerType.Circle,
            Color = OxyColors.DarkGreen,//.Parse("#00FF00"),
            MarkerSize = 1,
            StrokeThickness = 2
        };
        poreModel.Series.Add(poreSeries);

        
        /*Initializing friction ratio, RF % model*/ 
       rfXAxis = new LinearAxis(){Position = AxisPosition.Top, StartPosition = 0, EndPosition = 1,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Rf (%)"};
       rfModel.Axes.Add(rfXAxis);
       rfYAxis = new LinearAxis(){Position = AxisPosition.Left, StartPosition = 1, EndPosition = 0,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Depth (m)"};
       rfModel.Axes.Add(rfYAxis);
       rfSeries = new LineSeries
        {
            Title = "Friction Ratio",
            MarkerType = MarkerType.Circle,
            Color = OxyColors.DarkBlue,
            MarkerSize = 1,
            StrokeThickness = 2
        };
        rfModel.Series.Add(rfSeries);
    }
    public void InitializeDecayPlotModelsObsolete()
    {
       poreLogDecayModel = new PlotModel {  Title = "Pore Pressure Decay"};
       poreRootDecayModel = new PlotModel { Title = "Pore Pressure Decay"};
       coneLogDecayModel = new PlotModel {  Title = "Tip Resistance Decay"};
       coneRootDecayModel = new PlotModel { Title = "Tip Resistance Decay"};

               /*Initializing pore P decay model*/ 
       poreLogXAxis = new LogarithmicAxis(){Position = AxisPosition.Bottom, StartPosition = 0, EndPosition = 1,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Log Time (mins)"};
       poreLogDecayModel.Axes.Add(poreLogXAxis);
       poreLogYAxis = new LinearAxis(){Position = AxisPosition.Left, StartPosition = 0, EndPosition = 1,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Pore Pressure, u2 (MPa)"};
       poreLogDecayModel.Axes.Add(poreLogYAxis);
       poreLogSeries = new LineSeries
        {
            Title = "PP Decay",
            MarkerType = MarkerType.Circle,
            MarkerSize = 1,
            Color = OxyColors.DarkRed,
            StrokeThickness = 1
        };
        poreLogDecayModel.Series.Add(poreLogSeries);
        //root model
       poreRootXAxis = new LinearAxis(){Position = AxisPosition.Bottom, StartPosition = 0, EndPosition = 1,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Root Time (mins ^ 0.5)"};
       poreRootDecayModel.Axes.Add(poreRootXAxis);
       poreRootYAxis = new LinearAxis(){Position = AxisPosition.Left, StartPosition = 0, EndPosition = 1,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Pore Pressure, u2 (MPa)"};
       poreRootDecayModel.Axes.Add(poreRootYAxis);
       poreRootSeries = new LineSeries
        {
            Title = "PP Decay",
            MarkerType = MarkerType.Circle,
            MarkerSize = 1,
            Color = OxyColors.DarkBlue,
            StrokeThickness = 1
        };
        poreRootDecayModel.Series.Add(poreRootSeries);

        /*Initializing Cone decay model*/ 
       coneLogXAxis = new LogarithmicAxis(){Position = AxisPosition.Bottom, StartPosition = 0, EndPosition = 1,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Log Time (mins)"};
       coneLogDecayModel.Axes.Add(coneLogXAxis);
       coneLogYAxis = new LinearAxis(){Position = AxisPosition.Left, StartPosition = 0, EndPosition = 1,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Tip Resistance (MPa)"};
       coneLogDecayModel.Axes.Add(coneLogYAxis);
       coneLogSeries = new LineSeries
        {
            Title = "PP Decay",
            MarkerType = MarkerType.Circle,
            MarkerSize = 1,
            Color = OxyColors.DarkGoldenrod,
            StrokeThickness = 1
        };
        coneLogDecayModel.Series.Add(coneLogSeries);
        //root model
       coneRootXAxis = new LinearAxis(){Position = AxisPosition.Bottom, StartPosition = 0, EndPosition = 1,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Root Time (mins ^ 0.5)"};
       coneRootDecayModel.Axes.Add(coneRootXAxis);
       coneRootYAxis = new LinearAxis(){Position = AxisPosition.Left, StartPosition = 0, EndPosition = 1,  MajorGridlineStyle = LineStyle.Solid, MinorGridlineStyle = LineStyle.Dot, Title = "Tip Resistance (MPa)"};
       coneRootDecayModel.Axes.Add(coneRootYAxis);
       coneRootSeries = new LineSeries
        {
            Title = "PP Decay",
            MarkerType = MarkerType.Circle,
            MarkerSize = 1,
            Color = OxyColors.DarkGreen,
            StrokeThickness = 1
        };
        coneRootDecayModel.Series.Add(coneRootSeries);
    }
    private void GenerateDynamicPlot(int index, double x, double y)
    {
        if(state.HeaderIndexDict.Value.ContainsKey(index))
        {
            if(index == 1)//tip resistance
            {
                coneSeries.Points.Add(new DataPoint(x,y));
                coneModel.InvalidatePlot(true);
            }
            else if(index == 2)
            {
                sleeveSeries.Points.Add(new DataPoint(x,y));
                sleeveModel.InvalidatePlot(true);
            }
            else if(index == 3)
            {
                poreSeries.Points.Add(new DataPoint(x,y));
                poreModel.InvalidatePlot(true);
            }
        }

    }

}
