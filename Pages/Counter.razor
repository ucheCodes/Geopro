@page "/borelogs"
@inject DatabaseService database
@inject PlotModelService PlotModelService
@inject State state

<BlazorPlotView Model="@legendModel" Width="180" Height="565"/>
<BlazorPlotView Model="@boreholeModel" Width="100" Height="565"/>
<BlazorPlotView Model="@coneModel" Width="180" Height="565" />
@code{

    PlotModel legendModel = new PlotModel {Title = "Legends" };
    PlotModel boreholeModel = new PlotModel {Title = "Borehole"};
    PlotModel coneModel = new PlotModel { Title = "Resistance" };
    protected override void OnInitialized()
    {
        coneModel = PlotModelService.CreatePlotModel();
        //coneModel = PlotConeModel();
       //plotModel = PlotModelService.CreateRectangleWithText(3,6,1,3);
       //GenerateBoreholeLogs();

    }
    private PlotModel PlotConeModel()
    {
        var computedCol = state.FilteredAndComputedCPTDataInColumnsDict.Value;
        if(computedCol.Count() > 11)//Find a way to trigger the CPT process button before loading this component
        {
            List<double> depth = computedCol[0];
            List<double> qc = computedCol[1];
            List<double> qt = computedCol[10];
            List<double> qnet = computedCol[11];
            if(depth.Count > 0 && qc.Count > 0 && qt.Count > 0 && qnet.Count > 0)
            {
                var cm = PlotModelService.PlotConeResistance(depth, qc,qt, qnet);
                return cm;
            }
        }
        return new PlotModel();
    }
    private void GenerateBoreholeLogs()
    {
        //Get sotr from db in place of this sample
        var computedCol = state.FilteredAndComputedCPTDataInColumnsDict.Value;
        double cptMaxDepth = 30; double maxBoreholeDepth = 0;
        var sample = new List<SampleInfo>()
        {
            new SampleInfo(){BoreholeStartDepth = 0, BoreholeEndDepth = 3, SampleType = "clay"},
            new SampleInfo(){BoreholeStartDepth = 3, BoreholeEndDepth = 6, SampleType = "sand"},
            new SampleInfo(){BoreholeStartDepth = 7, BoreholeEndDepth = 10, SampleType = "clay"},
            new SampleInfo(){BoreholeStartDepth = 10, BoreholeEndDepth = 15, SampleType = "sand"},
        };
        double sampleMaxDepth = sample.Max(x => x.BoreholeEndDepth);
        if(computedCol.ContainsKey(0) && computedCol[0].Count > 0)//cpt depth
        {
            cptMaxDepth = computedCol[0].Max();
        }
        if(cptMaxDepth > sampleMaxDepth)
        {
            maxBoreholeDepth = cptMaxDepth;
        }
        else
        {
            maxBoreholeDepth = sampleMaxDepth;
        }
        var plotModel = PlotModelService.GenerateBoreholeLogs(sample,maxBoreholeDepth);
        legendModel = plotModel.Legend;
        boreholeModel = plotModel.Borehole;
    }
}