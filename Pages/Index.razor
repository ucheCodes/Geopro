@page "/"
@inject DatabaseService database
@inject NavigationManager navigationManager
@inject IJSRuntime jSRuntime
@inject IFunctions functions
@inject IStore store
@inject State state
@inject WriteToFile fileWriter

<InputFile type="file" id="fileInput" style="display: none;"  OnChange="@HandleFileChange" accept=".csv,.txt"/>
<section class="container">  
  <div class="menu">
    <ul class="menu-items">
      <li @onclick="(() => ToggleMenu(file))"><i class="@((activeMenu == file) ? "active" : "")">New Project</i></li>
      <li @onclick="(() => ToggleMenu(edit))"><i class="@((activeMenu == edit) ? "active" : "")">Edit</i></li>
      <li @onclick="(() => ToggleMenu(process))"><i>Process</i></li>
      <li @onclick="(() => ToggleMenu(view))"><i class="@((activeMenu == view) ? "active" : "")">View</i></li>
      <li @onclick="(() => ToggleMenu(save))"><i class="@((activeMenu == save) ? "active" : "")">Save</i></li>
    </ul>

    <div class="icons">
        <div>
            <span class="icons-group @((activeMenu == file) ? "active" : "")">
                <i @onclick="(() => ShowFileDialog(true))" class="fas fa-file-csv"></i>
                <i @onclick="GotoLab" class="fas fa-tint"/>
                <i @onclick="(() => {showProjects = true;})" class="fas fa-eye"></i>
                <i @onclick="_ClearAll"  class="fas fa-trash"></i>
            </span>
            <span class="icons-group @((activeMenu == edit) ? "active" : "")">
                    <i @onclick="(() => ShowFileDialog(false))"  class="fas fa-folder-open"></i>
                    <i @onclick="@(() => {showProcessInput = true;})" class="fas fa-book"/>
            </span>
            <span class="icons-group @((activeMenu == process) ? "active" : "")">
                <i @onclick="ViewRawData"  class="fas fa-table"></i>
                <i @onclick="ViewFilteredData"  class="fas fa-server"></i>
                <i @onclick="ViewDataDecay"  class="fas fa-star"></i>
                <i @onclick="ViewProcessedData" class="fas fa-tv"></i>             
            </span>
            <span class="icons-group @((activeMenu == view) ? "active" : "")">
                <i @onclick="(() => {showBigGraph = true;})" class="fas fa-chart-line"></i>
                <i @onclick="(() => {showBigTable = true;})"  class="far fa-file-excel"></i>
            </span>
            <span class="icons-group @((activeMenu == save) ? "active" : "")">
                <i @onclick="Save" class="fas fa-save"></i>
                <i @onclick="WriteDataToFile" class="fas fa-edit"></i>
                <i @onclick="@(e =>Screenshot("chart1"))" class="fas fa-camera"></i>
            </span>
        </div>
    </div>
  </div> 

  <Chart headerIndexDict="state.HeaderIndexDict.Value"  @ref="chartRef" TableTiltle="@tableTitle" />
  
 <div class="graph @((showBigGraph) ? "active" : "")">
    <span @onclick="(() => {showBigGraph = false;})" class="red x @((state.Project.Value.Info.Name != "") ? "active" : "")">X</span> 
    <span @onclick="@(e =>Screenshot("chart2"))" class="camera @((state.Project.Value.Info.Name != "") ? "active" : "")"><i class="fas fa-camera-retro"></i></span>
        <div>
            <BigGraph isRender="showBigGraph" dataArray="dataArray"
             filteredRawDataInColumnsDict="filteredRawDataInColumnsDict"
             headerIndexDict="state.HeaderIndexDict.Value" 
              filteredRawDataInRowsArray ="filteredRawDataInRowsArray" strokeInfo="strokeInfo"/>
        </div>
  </div> 


    <div class="big-table @((showBigTable) ? "active" : "")">
        <span @onclick="(() => {showBigTable = false;})" class="red x">X</span> 
            <BigTable  TableTiltle="@tableTitle"  dataArray="dataArray" filteredRawDataInRowsArray ="filteredRawDataInRowsArray" />   
    </div>

    <div class="projects @((showProjects) ? "active" : "")">
        <span @onclick="(() => {showProjects = false;})" class="red x">X</span> 
        <ProjectsTable ProjectEventCallBack="ModifySavedProject" /> 
    </div>

    <div class="pro-dialog @((showProcessInput) ? "active" : "")">
        <span @onclick="@((e) => {showProcessInput = false;})" class="red x">X</span> 
        <ProcessInputs ProcessInputsCallback="ProcessInputs"  />
    </div>

    <div class="msg-dialog @((showMessageBox) ? "active" : "")">
        <MessageBox msgType="@msgBoxType"
           msg="@msgBoxInfo" okString="@msgBoxOkString" route="@msgBoxRoute" ShowMessageBox="CloseMessageBox"  />
    </div>
</section>

@code{
    public Chart? chartRef;
    bool showBigGraph = false;
    bool showMessageBox = false;
    string msgBoxInfo = "";
    string msgBoxType = "";
    string msgBoxRoute = "";
    string msgBoxOkString = "";
    bool showProcessInput = false;
    bool showBigTable = false;
    bool showProjects = false;
    bool isFiltered = false;
    bool isProcessed = false;
    private string activeMenu = "file";
    string file = "file";
    string edit = "edit";
    string view = "view";
    string process = "process";
    string save = "save";
    string tableTitle = "";

    string[]? lastDataArray;
    List<string[]> dataArray = new List<string[]>();
    List<double[]> filteredRawDataInRowsArray = new List<double[]>();
    List<double> submergedDensityInCol = new List<double>();
    List<string> soilNatureInCols = new();
    List<double> strokeInfo = new();
    Dictionary<int, List<double>> filteredRawDataInColumnsDict = new Dictionary<int, List<double>>();
    protected override void OnInitialized()
    {
        /*
            study and work on drifts and zeros
            create boring logs and plot torvane (undrained shear strength (su)), pp and UU
            confirm formula binding relationship of yd, yw and nmc in excel
            check why stroke info is not updated for the loaded chart used for test
            compare with new data
            excel data reader for .xls
        */
        /*
         Now that I am working with samples, modify processed such that
         //No sample, no qnet,no Qt
         //when populating the bulk density table to be used for populating qnet
         //use samples end depth as the up bound for the depths and add the bulk density value obtained
         //i.e for borehole 0 - 3m, every depth below 3m, will take the value of the bulk density for that borehole
         //rename counter as borehole and let the color rhyme with others. 
         //modify big graph to take 3 images then copy that header page to counter
         //process all previous data using the new software
        */
    }
    protected override void OnAfterRender(bool firstRender)
    {
        ReloadData();
    }

    private void ToggleMenu(string itemClicked)
    {
        activeMenu = itemClicked;
    }
    private void ReloadData()
    {
        if(state.DataArray.Value.Count > dataArray.Count)
        {
            dataArray = state.DataArray.Value;
            strokeInfo = state.StrokeInfo.Value;
            if(state.Data2Show.Value == "raw")
            {
                ViewRawData();
            }
            else if(state.Data2Show.Value == "filtered")
            {
                ViewFilteredData();
            }
            else if(state.Data2Show.Value == "processed")
            {
                ViewProcessedData();
            }
            else if(state.Data2Show.Value == "decay")
            {
                ViewDataDecay();
            }
            InvokeAsync(StateHasChanged);
        }
    }
    private async void Screenshot(string id)
    {
        if(state.Data2Show.Value != "")
        {
            await jSRuntime.InvokeVoidAsync("screenShot",id);
            navigationManager.NavigateTo($"/output");
        }
        else
        {
            MsgBoxHelper("Kindly start a project to generate charts!","warn","","null",true);
        }
    }
    private void GotoLab()
    {
        navigationManager.NavigateTo("/lab");
    }
    private void CloseMessageBox(string value)
    {
        if(value == "cancel")
        {
            showMessageBox = false;
        }
        else if(value == "continue"){/*changes route*/}
        else if(value != "")
        {
            RunOkFunction(value);
            showMessageBox = false;
        }
    }
    private void RunOkFunction(string functionName)
    {
        switch(functionName)
        {
            case "ClearAll":
                ClearAll();
            break;
            case "Save":
                //SaveNewProject();
            break;
            default:
            break;
        }
    }
    private void MsgBoxHelper(string info, string type, string route, string ok, bool show)
    {
        msgBoxInfo = info;
        msgBoxType = type;
        msgBoxRoute = route;
        msgBoxOkString = ok;
        showMessageBox = show;
    }
    private void Test2()
    {
        //var filteredRawDataInRowsArray = FilterRawData(dataArray);
        Console.WriteLine(filteredRawDataInColumnsDict.Count());
        foreach(var data in filteredRawDataInColumnsDict.Values)
        {
            foreach(var item in data)
            {
                Console.Write($" {item} ");
            }
            Console.WriteLine("");
        } 
    }
    private void WriteDataToFile()
    {
            if(state.Data2Show.Value == "raw" && state.HeaderArray.Value.Count > 0 && state.DataArray.Value.Count > 0)
            {
                var header = fileWriter.BuildRowsToCSVString(state.HeaderArray.Value);
                var body = fileWriter.BuildRowsToCSVString(state.DataArray.Value);
                string data = $"{header}{body}";
                fileWriter.WriteToCSVFile(data);

            }
            else if(state.Data2Show.Value == "filtered" && state.HeaderArray.Value.Count > 0 && filteredRawDataInRowsArray.Count > 0)
            {
                var header = fileWriter.BuildRowsToCSVString(state.HeaderArray.Value);
                var body = fileWriter.BuildRowsToCSVString(filteredRawDataInRowsArray);
                string data = $"{header}{body}";
                fileWriter.WriteToCSVFile(data);
            }
            else if(state.Data2Show.Value == "processed" && state.FilteredAndComputedCPTDataInColumnsDict.Value.Count() > 0 && state.HeaderIndexDict.Value.Count() > 0)
            {
                string header = ""; string unit = "";string comma = string.Empty;int i = 0;
                var body = fileWriter.BuildColumnsToCSVString(state.FilteredAndComputedCPTDataInColumnsDict.Value);
                foreach(var kvp in state.HeaderIndexDict.Value)
                {
                    if(i < state.HeaderIndexDict.Value.Count() - 1)
                    {
                        comma = ",";//just to maintain uniformity with my file writer csv codes
                    }
                    else
                    {
                        comma = string.Empty;
                    }
                    header += $"{kvp.Value}{comma}"; 
                    if(!string.IsNullOrWhiteSpace(kvp.Value) && state.HeaderUnitDict.Value.ContainsKey(kvp.Key))
                    {
                        unit += $"{state.HeaderUnitDict.Value[kvp.Key]}{comma}";
                    }
                    i++;
                }
                string data = $"{header}\n{unit}\n{body}";
                fileWriter.WriteToCSVFile(data);
            }
            else
            {
                MsgBoxHelper("No data available. Kindly start a new project","warn","","null",true);
            }
    }
    private void ViewRawData()
    {
       if(chartRef != null && dataArray.Count > 0)
       {
         store.Mutate<string>("Data2Show","raw");
         tableTitle = "CPT Raw Data";
         chartRef.ViewRawData(dataArray);
       }
        else
       {
            var msg = "No data imported ...Kindly, start a new project";
            MsgBoxHelper(msg,"warn","","null",true);
       }
    }
    private void ViewDataDecay()
    {
       if(chartRef != null && dataArray.Count > 0)
       {
         store.Mutate<string>("Data2Show","decay");
         tableTitle = "CPT Raw Data Decay";
         chartRef.ViewDataDecay(dataArray);
       }
        else
       {
            var msg = "No data imported ...Kindly, start a new project";
            MsgBoxHelper(msg,"warn","","null",true);
       }
    }
    private void ViewFilteredData()
    {
       if(chartRef != null && dataArray.Count > 0)
       {
            if(isFiltered == false)
            {
                filteredRawDataInRowsArray = new();
                filteredRawDataInRowsArray = FilterRawData(dataArray);
                chartRef.ViewFilteredData(filteredRawDataInRowsArray,filteredRawDataInColumnsDict);
                isFiltered = true;
            }
            else
            {
                chartRef.ViewFilteredData(filteredRawDataInRowsArray,filteredRawDataInColumnsDict);
            }
            store.Mutate<string>("Data2Show","filtered");
            tableTitle = "CPT Filtered Data";
       }
       else
       {
            var msg = "No data imported for processing";
            MsgBoxHelper(msg,"warn","","null",true);
       }
    }
    private void ProcessInputs()
    {
        showProcessInput = false;
        isProcessed = false;
        ViewProcessedData();
    }
    private void ViewProcessedData()
    {
        if(chartRef != null && dataArray.Count > 0)
       {
            if(state.WaterColumnDepth.Value > 0 && state.ConeAreaRatio.Value > 0)
            {
                computeProcessedData();
                store.Mutate<string>("Data2Show","processed");
                tableTitle = "CPT Processed Data";
                chartRef.ViewProcessedData();
            }
            else
            {
                showProcessInput = true;
            }
       }
       else
       {
            var msg = "No data imported for processing";
            MsgBoxHelper(msg,"warn","","null",true);
       }
    }
    private void computeProcessedData()
    {
        try
        {
            if(!isProcessed)
            {
                int i = 0; 
                double u0 = 0;
                double a = state.ConeAreaRatio.Value;
                if(!isFiltered)
                {
                    filteredRawDataInRowsArray = new();
                    filteredRawDataInRowsArray = FilterRawData(dataArray);
                }
                int dataIndex = filteredRawDataInColumnsDict.Count();
                ModifyHeadersForProcessed(dataIndex);
                foreach(var row in filteredRawDataInRowsArray)
                {
                    //qt = qc + u2(1 - a)//Robertson and lunne et al. 1986
                    //qnet = qt - dv0 where dv0 is unit weight of soil samples * depth
                    //rf = fs / qt  typically 
                    //Bq = (u2 - u0) / qnet; //assume u0 = 0 
                    if(row[0] > 0)
                    {
                        Tuple<double, double> overburden = functions.ComputeOverburdenPressure(submergedDensityInCol[i],row[0]);
                        double effectiveOverburden = overburden.Item1;
                        double totalOverburden = overburden.Item2;
                        double qt = row[1] + (row[3] * (1 - a));
                        double qnet = qt - totalOverburden;
                        double Qt = qnet / effectiveOverburden;
                        double rf = row[2] / qt;
                        double bq = (row[3] - u0) / qnet;//find out u0
                        PopulateRawDataIntoColumns(dataIndex, qt);
                        PopulateRawDataIntoColumns(dataIndex + 1, qnet);
                        PopulateRawDataIntoColumns(dataIndex + 2, Qt);
                        PopulateRawDataIntoColumns(dataIndex + 3, rf);
                        PopulateRawDataIntoColumns(dataIndex + 4, bq);
                        PopulateRawDataIntoColumns(dataIndex + 5, effectiveOverburden);
                        PopulateRawDataIntoColumns(dataIndex + 6, totalOverburden);
                        i++;
                    }
                }
                store.Mutate<Dictionary<int, List<double>>>("FilteredAndComputedCPTDataInColumnsDict",filteredRawDataInColumnsDict);
                isProcessed = true;
            }
        }
        catch(Exception e)
        {
            var msg = e.Message.ToString();
            MsgBoxHelper(msg,"warn","","null",true);
        }
    }
    private void ModifyHeadersForProcessed(int dataIndex)
    {
        var headerIndexDict = state.HeaderIndexDict.Value;
        var headerUnitDict = state.HeaderUnitDict.Value;
        if(!headerIndexDict.ContainsKey(dataIndex) && !headerUnitDict.ContainsKey(dataIndex))
        {
            //use this to populate the calculated data. No need for header Array
            headerIndexDict.Add(dataIndex,"qt");
            headerIndexDict.Add(dataIndex + 1,"qnet");
            headerIndexDict.Add(dataIndex + 2,"Qt");
            headerIndexDict.Add(dataIndex + 3,"Rf");
            headerIndexDict.Add(dataIndex + 4,"bq");
            headerIndexDict.Add(dataIndex + 5,"Effective Overburden");
            headerIndexDict.Add(dataIndex + 6,"Total Overburden");
            //units
            headerUnitDict.Add(dataIndex,"MPa");
            headerUnitDict.Add(dataIndex + 1,"MPa");
            headerUnitDict.Add(dataIndex + 2,"MPa");
            headerUnitDict.Add(dataIndex + 3,"%");
            headerUnitDict.Add(dataIndex + 4," ");
            headerUnitDict.Add(dataIndex + 5,"MPa");
            headerUnitDict.Add(dataIndex + 6,"MPa");
            store.Mutate<Dictionary<int, string>>("HeaderIndexDict",headerIndexDict);
            store.Mutate<Dictionary<int, string>>("HeaderUnitDict",headerUnitDict);
        }
    }

    private void ModifySavedProject(Tuple<string,Project> tupleData)
    {
        string operation = tupleData.Item1;
        Project project = tupleData.Item2;
        if(operation == "edit")
        {
            project.SetProjectToState = false;
            store.Mutate<Project>("SaveProjectParameter", project);
            navigationManager.NavigateTo("/save");
        }
        else if(operation == "delete")
        {
            var msg = "Project deleted successfully";
            MsgBoxHelper(msg,"valid","","null",true);
        }
        else if(operation == "delete failed")
        {
            var msg = "project failed to delete!!!";
            MsgBoxHelper(msg,"warn","","null",true);
        }
        else if(operation == "view")
        {
            LoadSavedProject(project);
        }
        showProjects = false;
        InvokeAsync(StateHasChanged);
    }
    private Project PopulateProject()
    {
        var _project = new Project()
        {
            DataArray = dataArray,
            FilteredRawDataInRowsArray = filteredRawDataInRowsArray,
            TableTitle = tableTitle, 
            HeaderArray = state.HeaderArray.Value,
            SubmergedDensityInCol = submergedDensityInCol,
            SoilNatureInCols = soilNatureInCols,
            StrokeInfo = strokeInfo,
            FilteredRawDataInColumnsDict = filteredRawDataInColumnsDict,
            HeaderIndexDict = state.HeaderIndexDict.Value,
            HeaderUnitDict = state.HeaderUnitDict.Value,
            IsFiltered = isFiltered
        };//Include var for processed and computed data
        if(lastDataArray != null)
        {
            _project.LastDataArray = lastDataArray;
        }          
        return _project;
    }
    private void Save()
    {
        if(state.IsDataLoaded.Value && dataArray.Count > 0)
        {
            var project = PopulateProject();
            if(state.Project.Value.Id == "" )
            {
                string id = Guid.NewGuid().ToString();
                project.Id = id;
                project.SetProjectToState = true;
                store.Mutate<Project>("SaveProjectParameter",project);
                navigationManager.NavigateTo("/save");           
            }
            else if(state.Project.Value.Id != "")
            {
                project.Id = state.Project.Value.Id;
                project.Info = state.Project.Value.Info;
                bool isCreated = functions.SaveProject(project);
                if(isCreated)
                {
                    var msg = "Project progress saved!!!";
                    MsgBoxHelper(msg,"valid","","null",true);
                    store.Mutate<Project>("Project",project);
                 }
            }
        }
        else if(state.Project.Value.Id != "")
        {
            var msg = "Project saved success!!!";
            MsgBoxHelper(msg,"valid","","null",true);  
        }
        else
        {
            var msg = "Empty project cannot be saved!!! Kindly click New to start.";
            MsgBoxHelper(msg,"warn","","null",true);    
        }
    }
    private void LoadSavedProject(Project p)
    {
        if(p.DataArray.Count > 0)
        {
            ClearAll();
            store.Mutate<bool>("IsDataLoaded",true);
            dataArray = p.DataArray;
            filteredRawDataInRowsArray = p.FilteredRawDataInRowsArray;
            tableTitle = p.TableTitle;
            store.Mutate<string>("Data2Show","raw");
            store.Mutate<List<string[]>>("DataArray",p.DataArray);
            store.Mutate<List<string[]>>("HeaderArray",p.HeaderArray);
            store.Mutate<Dictionary<int, string>>("HeaderUnitDict",p.HeaderUnitDict);
            store.Mutate<Dictionary<int, string>>("HeaderIndexDict",p.HeaderIndexDict);
            submergedDensityInCol = p.SubmergedDensityInCol;
            soilNatureInCols = p.SoilNatureInCols;
            strokeInfo = p.StrokeInfo;
            filteredRawDataInColumnsDict = p.FilteredRawDataInColumnsDict;
            isFiltered = p.IsFiltered;//include isProcessed
            store.Mutate<Project>("Project",p);
            ViewRawData();
        }
        else if(p.Id != "")
        {
            ClearAll();
            store.Mutate<Project>("Project",p);
        }
    }
    private void ModifyDepthAndTimeValuesAndAppend(string[] values)
    {
        try
        {
            if(lastDataArray != null)
            {
            string[] newValues = new string[values.Length];
            var lastDepthValue = lastDataArray[0];
            var lastTimeValue = lastDataArray[values.Length - 1];//last index returns white space 
            double parsedLastDepthValue;//because of the csv format
            double parsedItemDepthValue;
            double parsedLastTimeValue;
            double parsedItemTimeValue;
            int index = 0;
            foreach(var item in values)
            {
                if(index == 0)
                {
                    if(double.TryParse(lastDepthValue, out parsedLastDepthValue) && double.TryParse(item, out parsedItemDepthValue))
                    {
                        string computedDepth = (parsedLastDepthValue + parsedItemDepthValue).ToString(); 
                        newValues[0] = computedDepth;
                    }
                    else{
                        newValues[0] = "error";
                    }
                }
                else if(index == values.Length - 1 && double.TryParse(lastTimeValue, out parsedLastTimeValue) && double.TryParse(item, out parsedItemTimeValue))
                {//Time is usually the last in the data array 
                    double newTimeInSeconds = parsedLastTimeValue + parsedItemTimeValue;
                    newValues[index] = newTimeInSeconds.ToString();//index is values.Length - 1
                }
                else
                {
                    newValues[index] = item;
                }
                index++;
            }
                dataArray.Add(newValues);
            }
        }
        catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    private List<double[]> FilterRawData(List<string[]> rawDataArray)
    {
        filteredRawDataInColumnsDict = new();//Just because I am modifying, create a new instance
        submergedDensityInCol = new(); //when getting this from lab, be careful of the units
        List<double[]> filteredDataArray = new List<double[]>();//from kg / m3 convert to MPa by multiplying (density, g = 9.8 m/s, d) / 1000
        int i = 0;
        double penetrationStartDepth = 0;
        double currentDepth = 0;
        foreach(var dataArr in rawDataArray)
        {
            double index0; double index1;int j = 0;
            double[] filteredRow = new double[dataArr.Length];
            if(double.TryParse(dataArr[0], out index0) && double.TryParse(dataArr[1], out index1) && index0 > 0 && index1 > 0)
            {
                foreach(var data in dataArr)
                {
                    double value;
                    if(double.TryParse(data, out value))
                    {
                        if(i >= 0 && j == 0)//j reps the column of data contain depth
                        {
                            if(i == 0)//i keeps record of the number of rows of + cone res.
                            {
                                penetrationStartDepth = currentDepth;
                            } 
                            var newCalculatedDepth = value - penetrationStartDepth;
                            value = Math.Round(newCalculatedDepth, 2);
                        }
                        filteredRow[j] = value;//When writing codes for the zero's,
                        PopulateRawDataIntoColumns(j, value);//study the codes above and understand it proper
                        PopulateSubmergedDensityIntoColumns(j,value);//Finally, modify that value for the new zeros modified codes
                        j++;
                    }
                }
                i++;
                filteredDataArray.Add(filteredRow);
            }
            double.TryParse(dataArr[0], out currentDepth);
        }
        return filteredDataArray;
    }
    private void PopulateSubmergedDensityIntoColumns(int resistanceIndex, double resistanceValue)
    {
        if(resistanceIndex == 1 && resistanceValue > 1.0)//Mpa > 1.0 is typical of sand
        {
            submergedDensityInCol.Add(19.5);
            soilNatureInCols.Add("granular");
        }
        else if(resistanceIndex == 1 && resistanceValue <= 1.0)
        {
            submergedDensityInCol.Add(16.5);
            soilNatureInCols.Add("cohesive");
        }
    }
    private void PopulateRawDataIntoColumns(int index, double value)
    {
        var listData = new List<double>();
        if(state.HeaderIndexDict.Value.ContainsKey(index))
        {
            if(filteredRawDataInColumnsDict.ContainsKey(index))
            {
                filteredRawDataInColumnsDict[index].Add(value);
            }
            else{
                listData.Add(value);
                filteredRawDataInColumnsDict.Add(index,listData);
            }
        }
    }
    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            using (var reader = new StreamReader(file.OpenReadStream()))
            {
                string? line = string.Empty;
                int lineIndex = 0;
                List<string[]> headerArray = new();
                while (((line = await reader.ReadLineAsync()) != null!) && !string.IsNullOrWhiteSpace(line))
                {
                    string[] _values = line.Split(',');
                    string[] values = _values.Where(v => !string.IsNullOrWhiteSpace(v) && !string.IsNullOrEmpty(v)).ToArray();
                    if(lineIndex == 0 && state.IsNewDataClicked.Value)
                    {
                        headerArray.Add(values);
                        PopulateHeaders(values);
                    }
                    else if(lineIndex == 1 && state.IsNewDataClicked.Value)
                    {
                        headerArray.Add(values);
                        PopulateHeaderUnits(values);
                    }
                    else
                    {
                        if(state.IsNewDataClicked.Value)
                        {
                            dataArray.Add(values);
                            store.Mutate<bool>("IsDataLoaded",true);
                        }
                        else if(!state.IsNewDataClicked.Value && state.IsDataLoaded.Value &&  lineIndex > 1){
                            ModifyDepthAndTimeValuesAndAppend(values);
                        }
                        else if(!state.IsNewDataClicked.Value && !state.IsDataLoaded.Value){
                                break;
                        }
                    }
                    lineIndex++;
                }
                isFiltered = false;
                isProcessed = false;
                GetAndSetStrokeCount();
                if(headerArray.Count > 0)
                {
                    store.Mutate<List<string[]>>("HeaderArray",headerArray);
                }
                MutateDataArray();
            }
            ViewRawData();
            MutateStrokeInfo();
        }
        catch (Exception ex)
        {
            var msg = $"Error reading the file: " + ex.Message;
            MsgBoxHelper(msg,"warn","","null",true);
        }
    }
    private void GetAndSetStrokeCount()
    {
        if(dataArray.Count > 0)
        {
            double depth = 0;
            var lastData = dataArray[dataArray.Count - 1];
            double.TryParse(lastData[0], out depth);
            strokeInfo.Add(depth);
        }
    }
    private void MutateStrokeInfo()
    {
        if(strokeInfo.Count >= state.StrokeInfo.Value.Count)
        {
            store.Mutate<List<double>>("StrokeInfo",strokeInfo);
        }
    }
    private void MutateDataArray()
    {
        if(dataArray.Count >= state.DataArray.Value.Count)
        {
            store.Mutate<List<string[]>>("DataArray",dataArray);
        }
    }
    private void PopulateHeaders(string[] values)
    {
        int index = 0;
        Dictionary<int, string> headerIndexDict = new Dictionary<int, string> ();//index is key, result is value
        foreach (string value in values)
        {
            if(!string.IsNullOrWhiteSpace(value))
            {
                headerIndexDict.Add(index, value);
            }
            index++;
        }
        store.Mutate<Dictionary<int, string>>("HeaderIndexDict",headerIndexDict);
    }
    private void PopulateHeaderUnits(string[] values)
    {
        int index = 0;
        Dictionary<int, string> headerUnitDict = new Dictionary<int, string>();//key is header inder, value is unit
        foreach (string value in values)
        {
            if(!string.IsNullOrWhiteSpace(value) && state.HeaderIndexDict.Value.ContainsKey(index))
            {
                headerUnitDict.Add(index,value);
            }
            index++;
        }
        store.Mutate<Dictionary<int, string>>("HeaderUnitDict",headerUnitDict);
    }
    private void _ClearAll()
    {
        if(state.IsDataLoaded.Value)
        {
            MsgBoxHelper("This will clear the current project and all progress made!!!","warn","","ClearAll",true);
        }
    }
    private void ClearAll()
    {
        ClearChart();
        store.Mutate<Project>("Project",new());
        store.Mutate<Dictionary<int, string>>("HeaderUnitDict",new());
        store.Mutate<Dictionary<int, string>>("HeaderIndexDict",new());
        store.Mutate<List<double>>("StrokeInfo",new());
        store.Mutate<List<string[]>>("HeaderArray",new());
        store.Mutate<List<string[]>>("DataArray",new());
        store.Mutate<bool>("IsDataLoaded",false);
        store.Mutate<string>("Data2Show","");
        isFiltered = false;
        isProcessed = false;
        strokeInfo = new();
        dataArray = new();
    }
    private void ClearChart()
    {
        if(chartRef != null)
        {
            chartRef.InitializePlotModels();
        }
    }
    private async Task ShowFileDialog(bool isNewData)
    {
        store.Mutate<bool>("IsNewDataClicked",isNewData);
        if(isNewData)
        {
            ClearAll();
            await jSRuntime.InvokeVoidAsync("showFileDialog");
        }
        else if(!isNewData && state.IsDataLoaded.Value && dataArray.Count > 0)
        {
            lastDataArray = dataArray[dataArray.Count - 1];
            await jSRuntime.InvokeVoidAsync("showFileDialog");
        }
        else if(!isNewData && !state.IsDataLoaded.Value)
        {
            MsgBoxHelper("Kindly click on New to start a new project","warn","","null",true);
        }
    }
}
