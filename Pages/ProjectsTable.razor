@page "/project"
@inject DatabaseService database
@*inject IState state*@

@if(projects.Count > 0)
{
    <div class="dynamic-table">
        <div class="table-header">
            <h3 class="heading">Saved Projects</h3>
            <bold>@projects.Count projects</bold>
        </div>
            <div class="table large">
            <div class="table-body">
                <table>
                    <thead>
                        <tr>
                            <th>S/N</th>
                            <th>Date</th>
                            <th>Project Title</th>
                            <th>Project Location</th>
                            <th>Processor Name</th>
                            <th>Cone S / N</th>
                            <th>Site Name</th>
                            <th>Test Number</th>
                            <th>Water Depth</th>
                            <th>Depth Drilled</th>
                            <th>Easting</th>
                            <th>Northing</th>
                            <th>Raw Data count</th>
                            <th>Edit Project</th>
                            <th>Edit Info</th>
                            <th>Delete Project</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var project in projects)
                        {
                            count++;
                            <tr>
                                <td>@count</td>
                                <td>@project.Date.ToString("dd/MM/yyyy")</td>
                                <td>@project.Info.Title</td>
                                <td>@project.Info.Location</td>
                                <td>@project.Info.Name</td>
                                <td>@project.Info.ConeId</td>
                                <td>@project.Info.SiteName</td>
                                <td>@project.Info.TestNumber</td>
                                <td>@project.Info.WaterDepth m</td>
                                <td>@project.Info.DepthDrilled m</td>
                                <td>@project.Info.Easting</td>
                                <td>@project.Info.Northing</td>
                                <td>@project.DataArray.Count</td>
                                <td><i @onclick="@((e) => ModifyProject("view",project))" class="fas fa-edit icons"/></td>
                                <td><i @onclick="@((e) => ModifyProject("edit",project))"  class="fas fa-user icons"/></td>
                                <td><i @onclick="(() => _Delete(project.Id))"  class="fas fa-trash icons"/></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else{
    <h3>No Projects Saved</h3>
}
<div class="msg-dialog @((showMessageBox) ? "active" : "")">
    <MessageBox msgType="@msgBoxType"
        msg="@msgBoxInfo" okString="@msgBoxOkString" route="@msgBoxRoute" ShowMessageBox="CloseMessageBox"  />
</div>

@code {
    List<Project> projects = new();
    int count = 0;
    [Parameter]
    public EventCallback<Tuple<string,Project>> ProjectEventCallBack {get;set;}
    bool showMessageBox = false;
    string msgBoxInfo = "";
    string msgBoxType = "";
    string msgBoxRoute = "";
    string msgBoxOkString = "";
    protected override void OnInitialized()
    {
        GetAllProjects();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        count = 0;
    }
    private void GetAllProjects()
    {
        count = 0;
        var _projects = database.ReadAll("Projects");
        if(_projects.Count() > 0)
        {
            foreach(var p in _projects)
            {
                Project value = JsonConvert.DeserializeObject<Project>(p.Value) ?? new();
                projects.Add(value);
            }
            projects = projects.OrderByDescending(d => d.Date).ToList();
        }
    }
    private void ModifyProject(string operation, Project project)
    {
        var tupleData = new Tuple<string,Project>(operation,project);
        ProjectEventCallBack.InvokeAsync(tupleData);
    }
    private void Delete(string id)
    {
        bool isDel = database.Delete("Projects", id);
        if(isDel)
        {
            projects = projects.Where(p => p.Id != id).ToList();
        }
    }
    private void _Delete(string id)
    {
        string okVal = $"Delete_{id}";
        MsgBoxHelper("This data and all progress made will be deleted permanently!","warn","",okVal,true);
    }
    private void RunOkFunction(string functionName)
    {
        string parameter = "";
        if(functionName.StartsWith("Delete_"))//can use for other functions that contains parameter
        {
            var arr = functionName.Split("_");
            functionName = "Delete";//or  arr[0]
            parameter = arr[1];
        }
        switch(functionName)
        {
            case "Delete":
                Delete(parameter);
            break;
            default:
            break;
        }
    }
    private void CloseMessageBox(string value)
    {
        if(value == "cancel")
        {
            showMessageBox = false;
        }
        else if(value == "continue"){/*changes route*/}
        else if(value != "")
        {
            RunOkFunction(value);
            showMessageBox = false;
        }
    }
    private void MsgBoxHelper(string info, string type, string route, string ok, bool show)
    {
        msgBoxInfo = info;
        msgBoxType = type;
        msgBoxRoute = route;
        msgBoxOkString = ok;
        showMessageBox = show;
    }
}
