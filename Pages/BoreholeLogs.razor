@page "/borelogs"
@inject DatabaseService database
@inject PlotModelService PlotModelService
@inject NavigationManager navigationManager
@inject IJSRuntime jSRuntime
@inject IStore store
@inject State state

<InputFile type="file" id="image" style="display: none;" OnChange="@LoadFile" accept=".png,.jpg,.jpeg" />
<div class="graph active">
    <span @onclick="@(() => {navigationManager.NavigateTo("/lab");})" class="x red  @((state.Project.Value.Info.Name != "") ? "active" : "")">X</span>
        <span @onclick="@(e =>Screenshot("chart3"))" class="camera @((state.Project.Value.Info.Name != "") ? "active" : "")"><i class="fas fa-camera-retro"></i></span>
    <div id="chart3">
    @if(state.Project.Value.Info.Title != "")
    {
        var info = state.Project.Value.Info;
        <div class="chart-info">
            <div class="d-flex">
                <div class="img">
                    <img @onclick="(() => {ChangeImage(1);})" src="@state.ChartImages.Value.Item1"/>
                </div>
                <div class="img">
                    <img @onclick="(() => {ChangeImage(2);})" src="@state.ChartImages.Value.Item2"/>
                </div>
            </div>
            <div class="label">
                <label class="b1">Project Title: @info.Title</label>
                <br><label class="b2">Client: @info.Client</label>&nbsp;&nbsp;
                <label class="b2">Contractor: @info.Contractor</label><br>
                <label class="b3">Site Name: @info.SiteName</label>&nbsp;&nbsp;
                <label class="b3">Location: @info.Location</label>
                <br><label class="b3">E: @info.Easting</label>&nbsp;&nbsp;
                <label class="b3">N: @info.Northing</label>&nbsp;&nbsp;
                <label class="b3">Water column depth: @info.WaterDepth m</label>&nbsp;&nbsp;
                <label class="b3">Depth of Drilling: @info.DepthDrilled m</label>&nbsp;&nbsp;
                <label class="b3">Borehole Id: @info.TestNumber</label><br>
                <b class="@msgClass">@msg</b>
                <br>
            </div>
            <div class="img">
                <img @onclick="(() => {ChangeImage(3);})" src="@state.ChartImages.Value.Item3"/>
            </div>
        </div>
    }

    <div>
        <BlazorPlotView Model="@legendModel" Width="140" Height="550"/>
        <BlazorPlotView Model="@boreholeModel" Width="150" Height="550"/>
        @if(state.FilteredAndComputedCPTDataInColumnsDict.Value.Count() > 0)
        {
            <BlazorPlotView Model="@coneModel" Width="220" Height="550" />
            <BlazorPlotView Model="@poreModel" Width="220" Height="550" />
        }
        <BlazorPlotView Model="@wcModel" Width="160" Height="550" />
        <BlazorPlotView Model="@uwModel" Width="180" Height="550" />
    </div>
    </div>
</div>
@code{
    PlotModel legendModel = new PlotModel {Title = "" };
    PlotModel boreholeModel = new PlotModel {Title = ""};
    PlotModel coneModel = new PlotModel { Title = "" };
    PlotModel poreModel = new PlotModel();
    PlotModel uwModel = new PlotModel();
    PlotModel wcModel = new PlotModel();
    int count = 0;
    string msg = "";
    int imgId = 0;
    string msgClass = "";
    List<SampleInfo> allSOTR = new List<SampleInfo>();
    protected override void OnInitialized()
    {
        //coneModel = PlotModelService.CreatePlotModel();
        //coneModel = PlotConeModel();
       //plotModel = PlotModelService.CreateRectangleWithText(3,6,1,3);
       GenerateBoreholeLogs();
    }
     protected override void OnAfterRender(bool firstRender)
     {
        count++;
        GenerateBoreholeLogs();
     }
    private void GetAllSOTR()
    {
        if(state.Project.Value.Id != "")
        {
            var data = database.ReadAll("SOTR");
            foreach(var d in data)
            {
                var val = JsonConvert.DeserializeObject<SampleInfo>(d.Value);
                if(val != null && val.ProjectId == state.Project.Value.Id)
                {
                    allSOTR.Add(val);
                    // Console.WriteLine($"sotr {val.Id} {val.ProjectId} {val.TestId} {val.BoreholeStartDepth} {val.BoreholeEndDepth}");
                }
            }
        }
    }
    private PlotModel PlotConeModel()
    {
        var computedCol = state.FilteredAndComputedCPTDataInColumnsDict.Value;
        if(computedCol != null && computedCol.Count() > 11)
        {
            List<double> depth = computedCol[0];
            List<double> qc = computedCol[1];
            List<double> qt = computedCol[10];
            List<double> qnet = computedCol[11];
            if(depth.Count > 0 && qc.Count > 0 && qt.Count > 0 && qnet.Count > 0)
            {
                var cm = PlotModelService.PlotConeResistance(depth, qc,qt, qnet);
                return cm;
            }
        }
        return new PlotModel();
    }
    
    private PlotModel PlotPorePressureModel()
    {
        var computedCol = state.FilteredAndComputedCPTDataInColumnsDict.Value;
        if(computedCol != null && computedCol.Count() > 11)
        {
            List<double> depth = computedCol[0];
            List<double> u2 = computedCol[3];
            if(depth.Count > 0 && u2.Count > 0)
            {
                var pm = PlotModelService.PlotPorePressure(depth, u2);
                return pm;
            }
        }
        return new PlotModel();
    }
    private void GenerateBoreholeLogs()
    {
        try
        {
            GetAllSOTR();
            var computedCol = state.FilteredAndComputedCPTDataInColumnsDict.Value;
            double cptMaxDepth = 0; double maxBoreholeDepth = 0;
            var samples = new List<SampleInfo>()
            {
                new SampleInfo(){BoreholeStartDepth = 0, BoreholeEndDepth = 3, SampleType = "clay"},
                new SampleInfo(){BoreholeStartDepth = 3, BoreholeEndDepth = 6, SampleType = "sand"},
                new SampleInfo(){BoreholeStartDepth = 7, BoreholeEndDepth = 10, SampleType = "sandy clay"},
                new SampleInfo(){BoreholeStartDepth = 10, BoreholeEndDepth = 15, SampleType = "clayey sand"},
                new SampleInfo(){BoreholeStartDepth = 15, BoreholeEndDepth = 16, SampleType = "sand"},
                new SampleInfo(){BoreholeStartDepth = 16, BoreholeEndDepth = 20, SampleType = "silt"},
                new SampleInfo(){BoreholeStartDepth = 20, BoreholeEndDepth = 23, SampleType = "granite"},
                new SampleInfo(){BoreholeStartDepth = 25, BoreholeEndDepth = 30, SampleType = "boulders"},
                new SampleInfo(){BoreholeStartDepth = 34, BoreholeEndDepth = 42, SampleType = "rock"},
            };//for remove

            if(allSOTR.Count > 0)
            {
                double sampleMaxDepth = allSOTR.Max(x => x.BoreholeEndDepth);
                if(computedCol.ContainsKey(0) && computedCol[0].Count > 0)//cpt depth
                {
                    cptMaxDepth = computedCol[0].Max();
                }
                if(cptMaxDepth > sampleMaxDepth)
                {
                    maxBoreholeDepth = cptMaxDepth;
                }
                else
                {
                    maxBoreholeDepth = sampleMaxDepth;
                }
                allSOTR = allSOTR.OrderBy(x => x.BoreholeEndDepth).ToList();
                var plotModel = PlotModelService.GenerateBoreholeLogs(allSOTR,maxBoreholeDepth);
                legendModel = plotModel.Legend;
                boreholeModel = plotModel.Borehole;
                coneModel = PlotConeModel();
                poreModel = PlotPorePressureModel();
                uwModel = PlotModelService.PlotUnitWeight(allSOTR);
                wcModel = PlotModelService.PlotWaterContent(allSOTR);
            }
        }
        catch(Exception e)
        {
            Console.WriteLine("from generate bore: "+e.Message);
        }
    }
    private async void ChangeImage(int id)
    {
        imgId = id; msg = ""; msgClass = "";
        await jSRuntime.InvokeVoidAsync("openImageDialog");
    }
    private async void LoadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        try
        {
            using(var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                var array = memoryStream.ToArray();
                var imgData = "data:image/png;base64,"+Convert.ToBase64String(array);
                var tupleImg = state.ChartImages.Value;
                if(imgId == 1)
                {
                    store.Mutate<Tuple<string,string,string>>("ChartImages", new (imgData,tupleImg.Item2,tupleImg.Item3));
                }
                else if(imgId == 2)
                {
                    store.Mutate<Tuple<string,string,string>>("ChartImages", new (tupleImg.Item1, imgData,tupleImg.Item3));
                }
                else if(imgId == 3)
                {
                    store.Mutate<Tuple<string,string,string>>("ChartImages", new (tupleImg.Item1,tupleImg.Item2, imgData));
                }
                StateHasChanged();
            }
        }
        catch(Exception er)
        {
            msg = er.Message.ToString();
            msgClass = "red";
        }
    }
    private async void Screenshot(string id)
    {
        if(allSOTR.Count > 0)
        {
            await jSRuntime.InvokeVoidAsync("screenShot",id);
            navigationManager.NavigateTo($"/output");
        }
    }
}