@page "/writer"
@inject IJSRuntime jSRuntime
@inject NavigationManager navigationManager

<h3>Writing to File ...</h3>
<InputFile @ref="input" type="file" id="input" style="display: none;"  OnChange="@HandleFileChange" accept=".csv,.txt"/>
<button @onclick="@((e) => {navigationManager.NavigateTo("/");})"  class="btn btn-primary">Select File</button>
<p>@filepath</p>
@code {
    InputFile? input;
    protected override void OnInitialized()
    {
        /*
            When ready to use, create the row and columns method to be overloads
            containing series of rows and column
            with string and double arrays
        */
    }
    protected override void OnAfterRender(bool firstRender)
    {
        //WriteToFile("hello world");//valid
        //WriteRowsFileToCSV();//valid
         // WriteColumnFileToCSV();//valid
    }
    string filepath = "./file.csv";
    List<int[]> rows = new List<int[]>()
    {
      new int[4]{1,1,1,1},
      new int[4]{2,2,2,2},
      new int[4]{3,3,3,3},        
    };

    Dictionary<int, List<int>> columns = new ()
    {
        {0,new List<int>(){1,1,1,1,1}},
        {1,new List<int>(){2,2,2,2,2}},
        {2,new List<int>(){3,3,3,3,3}},
        {3,new List<int>(){4,4,4,4,4}},
        {4,new List<int>(){5,5,5,5,5}},
    };
    //int maxCount => columns.Values.Max(list => list.Count);
    private async void WriteColumnFileToCSV()
    {
        string path = $"{Guid.NewGuid().ToString()}.csv";
        StringBuilder dataBuilder = new StringBuilder();
        int maxColumnCount = columns.Values.Max(list => list.Count);
        for(int i = 0; i < maxColumnCount; i++)
        {
            string line = "";
            int j = 0;
            foreach(var column in columns)
            {
                if(i < column.Value.Count && j < columns.Count - 1)
                {
                    line += $"{column.Value[i]},";
                }
                else if(i < column.Value.Count && j <= columns.Count - 1)
                {
                    line += $"{column.Value[i]}";
                }
                j++;
            }
            line += "\n";
            dataBuilder.Append(line);
        }
        string data = dataBuilder.ToString();
        await jSRuntime.InvokeVoidAsync("saveAsFile", path, data);
    }
    private async void WriteRowsFileToCSV()
    {
        string path = $"{Guid.NewGuid().ToString()}.csv";
        StringBuilder dataBuilder = new StringBuilder();
        for(int i = 0; i < rows.Count; i++)
        {
            string line = "";
            int j = 0;
            foreach(var data in rows[i])
            {
                if(j < rows[i].Length - 1)
                {
                    line += $"{data},";
                }
                else{
                    line += $"{data}";
                }
                j++;
            }
            line += "\n";
            dataBuilder.Append(line);
        }
        string _data = dataBuilder.ToString();
        await jSRuntime.InvokeVoidAsync("saveAsFile", path, _data);
    }
    private void WriteToFile(string data)
    {
        try
        {
            string directoryPath = Path.GetDirectoryName(filepath) ?? "hello";
            if(directoryPath != null)
            {
                Directory.CreateDirectory(directoryPath);
                using (StreamWriter writer = new StreamWriter(filepath, append:true))
                {
                    writer.WriteLine(data);
                }
            }
        }
        catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    private void HandleFileChange(InputFileChangeEventArgs e)
    {
        if(e.File != null)
        {
           // _filepath = e.File.Name;
        }
    }
    private async void OpenFileDialog()
    {
        await jSRuntime.InvokeVoidAsync("openFileDialog");
    }
}
