    @inject DatabaseService database
    @inject IJSRuntime jSRuntime
    @inject IStore store
    @inject State state
    @inject UploadImage uploadImage
    @inject IFunctions functions
    
    <div class="dialog-box">
        <span @onclick="CloseDialog" class="red x">X</span> 
        <div>
            <h3>@Title</h3>
        </div>
        <span class="@msgClass">@sotrMsg</span>
        <div class="input-group">
            <p class="p">@state.Project.Value.Info.TestNumber     E: @state.Project.Value.Info.Easting m / N: @state.Project.Value.Info.Northing m</p>
        </div>
        <div class="input-group">
            <select @bind="testType">
                <option value="">Select Test Type</option>
                <option value="sample">Sample</option>
                <option value="cpt">CPT</option>
            </select>
        </div>
        @if(testType == "sample")
        {
            <div class="input-group">
                <select @bind="selectCalc">
                    <option value="">Compute sample parameter</option>
                    <option value="log">Add Boring Log</option>
                    <option value="uw">Unit Weight</option>
                    <option value="nmc">Natural Moisture Content (%)</option>
                    <option value="torvane">Torvane Test</option>
                    <option value= "pp">Pocket Penetrometer</option>
                </select>
            </div>
            <div class="input-group">
                <select @bind="containsCarbonate">
                    <option value="">Sample contains carbonate?</option>
                    <option value="true">True</option>
                    <option value="false">False</option>
                </select>
            </div>
        }
        <div class="input-group">
            <select @bind="samplingTool">
                <option value="">Select Sampling tool</option>
                @foreach(var s in samplingToolDict)
                {
                    <option value="@s.Value">@s.Key</option>
                }
            </select>
        </div>
        <div class="input-group">
            <input @bind="testId" type="text" placeholder="Test Id" name="input1">
        </div>
        <div class="input-group">
            <input @bind="boringStartDepth" type="text" placeholder="Start depth of borehole drilling in meter" name="input1">
        </div>
        <div class="input-group">
            <input @bind="boringEndDepth" type="text" placeholder="end depth of borehole drilling in meter" name="input1">
        </div>
        <div class="input-group">
            <input @bind="sampleDrillOut" type="text" placeholder="sample drill out in meter" name="input1">
        </div>
        @if(testType == "sample")
        {
            <div class="input-group">
                <input @bind="subSampleCsv" type="text" placeholder="sub sampling in meters e.g 0.2,0.4,0.6" name="input1">
            </div>
            <div class="input-group">
                Select Sample Photo:
                <InputFile type="file" id="sampleImg" placeholder="Add sample Image" OnChange="@HandleSampleUpload"  accept=".jpg,.jpeg,.png"/>
            </div>
        }
        <div class="input-group">
            <textarea @bind="sampleDesc" id="textarea" placeholder="Detailed sample / CPT Description"  name="textarea"></textarea>
        </div>
        <button @onclick="SaveSampleInfo" class="btn">Submit and Save</button>
    </div>
    @if(selectCalc != "")
    {
    <div class="sample-box">
        <div class="k">
        <span @onclick="@((e) => {selectCalc = string.Empty;})" class="red x">X</span> 
        @if(selectCalc == "uw")
        {
            <h3>Compute Unit Weight</h3>
            <span class="@msgClass">@msg</span>
            @if(SOTR.Calculus.UnitWeightParamList.Count > 0)
            {
                int i = 1;
                <div class="input-group">
                    <select  @onchange="OnUWParameterChange">
                        <option value="">click  +  to add new  -  remove</option>
                        @foreach(var u in SOTR.Calculus.UnitWeightParamList)
                        {
                            <option value="@u.id">uw @i : (@u.depth)m</option>
                            i++;
                        }
                    </select>
                </div>
            }
            <div class="input-group">
                <input type="text" @bind="containerLabel" placeholder="Container label / Tin Id" name="input1">
            </div>
            <div class="input-group">
                <input type="text" @bind="uwDepth" placeholder="depth of unit weight test" name="input1">
            </div>
            <div class="input-group">
                <input type="text" @bind="weightOfRingInGrams" placeholder="Weight of ring cylinder in grams" name="input1">
            </div>
            <div class="input-group">
                <input type="text" @bind="weightOfRingAndWetSampleInGrams" placeholder="weight of ring + wet sample in grams"  name="input3">
            </div>
            <div class="input-group">
                <input type="text" @bind="weightOfRingAndDrySampleInGrams" placeholder="weight of ring + dry sample in grams"  name="input3">
            </div>
            <div class="input-group">
                <input type="text" @bind="diameterOfRingInMillimeter" placeholder="diameter of ring in milli meter" name="input1">
            </div>
            <div class="input-group">
                <input type="text" @bind="heightOfRingInMillimeter" placeholder="height of ring cylinder in milli meter" name="input1">
            </div>
            <div class="input-group">
                <p>Volume of ring: <strong>@selectedUW.volumeofRingInMillimeter3.ToString("F2")</strong> mm^3  /  <strong>@selectedUW.volumeofRingInCentimeter3.ToString("F2")</strong> cm^3</p>
            </div>
            <div class="input-group">
                <p>Wet Unit Weight (kN/m3): <b>@selectedUW.bulkUnitWeightInKNm3.ToString("F2")</b> kN/m3</p>
            </div>
            <div class="input-group">
                <p>Dry UW (kN/m3): <b>@selectedUW.dryUnitWeightInKNm3.ToString("F2")</b> KN/m3 /sub. UW <b>@selectedUW.submergedDensityInKNm3.ToString("F2")</b> KN/m3</p>
            </div>
            @if(SOTR.Calculus.UnitWeightParamList.Count > 0)
            {
                <div class="circle-btns">
                    <div @onclick="AddUW" class="items"><span>+</span></div>
                    <div @onclick="RemoveUW" class="items"><span>-</span></div>
                </div>
            }
        }
        else if(selectCalc == "nmc")
        {
            <h3>Compute Natural Moisture Content Nmc (%)</h3>
            <span class="@msgClass">@msg</span>
            @if(SOTR.Calculus.MoistureContentParamList.Count > 0)
            {
                int i = 1;
                <div class="input-group">
                    <select @onchange="OnNmcParameterChange">
                        <option value="">click  +  to add new  -  remove</option>
                        @foreach(var p in SOTR.Calculus.MoistureContentParamList)
                        {
                            <option value="@p.id">wc @i : @p.depth m</option>
                            i++;
                        }
                    </select>
                </div>
            }
            <div class="input-group">
                <input @bind="nmcDepth" type="text" placeholder="test depth in meter" name="input1">
            </div>
            <div class="input-group">
                <input @bind="weightOfRingNmc" type="text" placeholder="Weight of container in grams" name="input1">
            </div>
            <div class="input-group">
                <input @bind="weightOfRingAndWetSampleNmc" type="text" placeholder="Weight of container + wet sample in grams" name="input1">
            </div>
            <div class="input-group">
                <input @bind="weightOfRingAndDrySampleNmc" type="text" placeholder="Weight of container + dry sample in grams" name="input1">
            </div>
            <div class="input-group">
                <p>Natural Moisture Content (%):  <b>@selectedNmcParameters.result</b> %</p>
            </div>
            @if(SOTR.Calculus.MoistureContentParamList.Count > 0)
            {
                <div class="circle-btns">
                    <div @onclick="AddNmc" class="items"><span>+</span></div>
                    <div @onclick="RemoveMmc" class="items"><span>-</span></div>
                </div>
            }
        }
        else if(selectCalc == "torvane")
        {
            <h3>Torvane Test</h3>
            <div class="input-group">
                <select @bind="tvVaneValue">
                    <option value="">Select Torvane blade</option>
                    <option value="1">Regular Vane (1 kg/cm^2)</option>
                    <option value="0.2">Large Vane (0.2 kg/cm^2)</option>
                    <option value="2.5">Small Vane (2.5 kg/cm^2)</option>
                </select>
            </div>
            <div class="input-group">
                <input @bind="tvScaleReading" type="text" placeholder="Scale reading from the torvane unit" name="input1">
            </div>
            <div class="input-group">
                <p>Undrained Shear Strength, Su (kPa):  <b>@SOTR.Calculus._Torvane.resultInKpa</b> kPa</p>
            </div>
            <div class="input-group">
                <p>Undrained Shear Strength, Su (MPa):  <b>@SOTR.Calculus._Torvane.resultInMpa</b> MPa</p>
            </div>
            <div class="input-group">
                <p>@state.Project.Value.Info.TestNumber     E: @state.Project.Value.Info.Easting m / N: @state.Project.Value.Info.Northing m</p>
            </div>
        }
        else if(selectCalc == "pp")
        {
            <h3>Pocket Penetrometer Test</h3>
            <div class="input-group">
                <select @bind="ppUnit">
                    <option value="">Select Unit of scale reading</option>
                    <option value="tsf">TSF</option>
                    <option value="kgcm2">kg/cm^2</option>
                </select>
            </div>
            <div class="input-group">
                <select @bind="ppShoe">
                    <option value="">Select Shoe Constant</option>
                    <option value="3.125">W. Show (3.125)</option>
                    <option value="50">No. Shoe (50)</option>
                </select>
            </div>
            <div class="input-group">
                <input @bind="ppScaleReading" type="text" placeholder="scale reading from the pocket penetrometer unit" name="input1">
            </div>
            <div class="input-group">
                <p>Unconfined Compressive Strength (kPa):  <b>@SOTR.Calculus.PP.resultInKpa</b> kPa</p>
            </div>
            <div class="input-group">
                <p>Unconfined Compressive Strength (MPa):  <b>@SOTR.Calculus.PP.resultInMpa</b> MPa</p>
            </div>
        }
        else if(selectCalc == "log")
        {
            <h3>Create Borehole Logs</h3>
            <span class="@msgClass">@msg @SOTR.BoreholeLogList.Count</span>
            @if(SOTR.BoreholeLogList.Count > 0)
            {
                int i = 1;
                <div class="input-group">
                    <select @onchange="OnBHLogParameterChange">
                        <option value="">click  +  to add new  -  remove</option>
                        @foreach(var b in SOTR.BoreholeLogList)
                        {
                            <option value="@b.id">wc @i (@b.strata) : @b.startDepth / @b.endDepth m</option>
                            i++;
                        }
                    </select>
                </div>
            }
            <div class="input-group">
                <select @bind="boreholeStrata">
                    <option value="">Select Strata</option>
                    <option value="sand">Sand</option>
                    <option value="clay">Clay</option>
                </select>
            </div>
            <div class="input-group">
                <input @bind="boreholeStartDepth" type="text" placeholder="borehole start depth in meter" name="input1">
            </div>
            <div class="input-group">
                <input @bind="boreholeEndDepth" type="text" placeholder="borehole end depth in meter" name="input1">
            </div>
            @if(SOTR.BoreholeLogList.Count > 0)
            {
                <div class="circle-btns">
                    <div @onclick="AddLog" class="items"><span>+</span></div>
                    <div @onclick="RemoveLog" class="items"><span>-</span></div>
                </div>
            }
        }
        <span class="@msgClass">@calcMsg</span>
        <button @onclick="SubmitCalculus" class="btn">Compute</button>
        </div>
    </div>
    }

    @if(showSampleImage && sampleImagePath != "")
    {
        <div class="img-dialog">
            <span @onclick="(() => {showSampleImage = false;})" class="red x">X</span> 
            <ViewSampleImage path="@sampleImagePath"/>
        </div>
    }
@code {
     //private ElementReference nmcSelectElement;
     Dictionary<string,string> samplingToolDict = new();
    [Parameter]
    public SampleInfo SOTR {get;set;} = new();
    [Parameter]
    public string Title {get;set;} = "";
    [Parameter]
    public bool AllowEdit {get;set;} = false;
    [Parameter]
    public EventCallback<bool> CloseSampleDialog {get;set;}
    [Parameter]
    public EventCallback<SampleInfo> UpdateSotrData {get;set;}
    string msg = "";
    string sotrMsg = "";
    string calcMsg = "";
    string msgClass = "red";
    string testId = "";
    string boringStartDepth = "";//for sample
    string boringEndDepth = "";
    string boreholeStartDepth = "";//for logs
    string boreholeEndDepth = "";
    string boreholeStrata ="";
    string sampleDrillOut = "";
    string subSampleIdCsv = "";
    string subSampleCsv = "";
    string samplingTool = "";
    string testType = "";
    string sampleDesc = "";
    string selectCalc = "";
    string containsCarbonate = "";
    bool showSampleImage = true;
    string sampleImagePath = "";
    (string id, string strata, double startDepth, double endDepth) selectedBoreholeLog = ("","",0,0);
    /*unit weight/ bulk density*/
    string weightOfRingInGrams = "";
    string weightOfRingAndWetSampleInGrams = "";
    string weightOfRingAndDrySampleInGrams = "";
    string diameterOfRingInMillimeter = "";
    string heightOfRingInMillimeter = "";
    string containerLabel = "";
    string uwDepth = "";
    (string id, string containerLabel, double depth, double weightOfRingInGram, double weightOfRingAndWetSampleInGram,double weightOfRingAndDrySampleInGram, double diameterOfRingInMillimeter, double heightOfRingInMillimeter, double volumeofRingInMillimeter3,double volumeofRingInCentimeter3, double bulkUnitWeightInKNm3, double dryUnitWeightInKNm3,double submergedDensityInKNm3) selectedUW = ("","",0,0,0,0,0,0,0,0,0,0,0);
    /*Natural Mositure Content*/
    string weightOfRingNmc = "";
    string weightOfRingAndWetSampleNmc = "";
    string weightOfRingAndDrySampleNmc = "";
    string nmcDepth = "";
    (string id, double depth, double weightOfRing, double weightOfRingAndWetSample, double weightOfRingAndDrySample, double result) selectedNmcParameters = ("",0,0,0,0,0);
    /*Torvane Test*/
    string tvVaneValue = "";
    string tvScaleReading = "";
    /*PP Test*/
    string ppUnit = "";
    string ppShoe = "";
    string ppScaleReading = "";

    protected override void OnInitialized()
    {
        samplingToolDict =  functions.GetSamplingTool();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        SetEditValues();
    }

    private void CloseDialog()
    {
        CloseSampleDialog.InvokeAsync(false);
    }
    private void SaveSampleInfo()
    {
        double bsd = 0; double bed = 0; double sr = 0; double sdo = 0;
        var sotr = SOTR;
        double.TryParse(boringStartDepth,out bsd);
        double.TryParse(boringEndDepth, out bed);
        double.TryParse(sampleDrillOut, out sdo);
        bool isContainCarbonate = false;

        if(containsCarbonate == "true"){isContainCarbonate = true;}
        if(sotr.Id == ""){sotr.Id = Guid.NewGuid().ToString(); sotr.Date = DateTime.Now;}

        if(state.Project.Value.Id != "" && testType != "" && testId != "")
        {
            if(bsd >= 0 && bed > 0 && bsd < bed)
            {
                sotrMsg = "";
                msgClass = "";
                sr = Math.Round((bed - bsd) * 100,0);//sr in cm. do well to confirm
                showSampleImage = true;
                var _sotr = new SampleInfo()
                {
                    Id = sotr.Id,
                    Date = sotr.Date,
                    ProjectId = state.Project.Value.Id,
                    TestId = testId,
                    SampleRecovery = sr,
                    ContainsCarbonate = isContainCarbonate,
                    SampleDesc = sampleDesc,
                    SampleType = testType,
                    SampleImagePath = sampleImagePath,
                    BoreholeStartDepth = bsd,
                    BoreholeEndDepth = bed,
                    SampleDrillOut = sdo,
                    SubSampleInCsv = subSampleCsv,
                    SubSampleIdInCsv = subSampleIdCsv,
                    SamplingTool = samplingTool,
                    Calculus = sotr.Calculus,
                    BoreholeLogList = sotr.BoreholeLogList
                };
                UpdateSOTR(_sotr);
            }
            else
            {
                sotrMsg = "start & end depth must be valid numbers, start depth must be less than end depth";
                msgClass = "red";
                Console.WriteLine(sotrMsg);
            }
        }
        else
        {
            msgClass = "red";
            sotrMsg = "Kindly fill test Id, select sampling tool and other required fields! ";
            Console.WriteLine(sotrMsg);
        }
        msg = "";
        msgClass = "";
    }
    private void SubmitCalculus()
    {
        if(selectCalc == "uw")
        {
            ComputeUW();
        }
        else if(selectCalc == "nmc")
        {
            ComputeNmc();
        }
        else if(selectCalc == "torvane")
        {
            double vane = 0; double reading = 0;
            if(double.TryParse(tvVaneValue,out vane) && double.TryParse(tvScaleReading, out reading))
            {
                double suInKpa = reading * 100 * vane;
                double suInMpa = suInKpa / 1000;
                var tv = (tvVaneValue,tvScaleReading,suInKpa,suInMpa);
                SOTR.Calculus._Torvane = tv;
            }
        }
        else if(selectCalc == "pp")
        {
            double shoe = 0; double reading = 0; double ppInKpa = 0; 
            if(double.TryParse(ppShoe,out shoe) && double.TryParse(ppScaleReading, out reading))
            {
                switch(ppUnit)
                {
                    case "tsf":
                     ppInKpa = reading * shoe * 95.76;//convert from tsf to kpa
                    break;
                    case "kgcm2":
                      ppInKpa = reading * shoe * 98.07;//convert from kg/cm2 to kpa
                    break;
                    default:
                      ppInKpa = 0; 
                    break;
                }
                double ppInMpa = ppInKpa / 1000;
                var pp = (ppUnit,ppShoe,ppScaleReading, ppInKpa,ppInMpa);
                SOTR.Calculus.PP = pp;
            }
        }
        else if(selectCalc == "log")
        {
            AddBoreholeLog();
        }
    }
    private async void HandleSampleUpload(InputFileChangeEventArgs e)
    {
        var path = await uploadImage.ConvertImageToWebp(e.File);
        sampleImagePath = path;
        showSampleImage = true;
        StateHasChanged();
    }
    private bool UpdateSOTR(SampleInfo sotr)
    {
        if(sotr.Id != "")
        {
            string key = JsonConvert.SerializeObject(sotr.Id);
            string value = JsonConvert.SerializeObject(sotr);
            var isAdded = database.Create("SOTR",key,value);
            if(isAdded)
            {
                UpdateSotrData.InvokeAsync(sotr);
                ClearAll();
                CloseDialog();
            }
            return isAdded;
        }
        return false;
    }
    private void SelectCalcParameter(ChangeEventArgs e)
    {
        calcMsg = "";msgClass = "";
        selectCalc = e.Value?.ToString() ?? "";
    }
    private void SetEditValues()
    {
        if(SOTR.Id != "" && AllowEdit)
        {
            containsCarbonate = "false";
            testId = SOTR.TestId;
            sampleDrillOut = SOTR.SampleDrillOut.ToString();
            boringStartDepth = SOTR.BoreholeStartDepth.ToString();
            boringEndDepth = SOTR.BoreholeEndDepth.ToString();
            testType = SOTR.SampleType;
            sampleDesc = SOTR.SampleDesc;
            sampleImagePath = SOTR.SampleImagePath;
            showSampleImage = true;
            subSampleCsv = SOTR.SubSampleInCsv;
            subSampleIdCsv = SOTR.SubSampleIdInCsv;
            samplingTool = SOTR.SamplingTool;
            if(SOTR.ContainsCarbonate){containsCarbonate = "true";}

            /*wet unit weight/ bulk density*/
            GetUWParameters();
            SetUWParameters();
            //Nmc
            GetNmcParameters();
            SetNmcParameters();
            //log
            //SetBHLogParams();
            GetBHLogParams();

            //Torvane
            tvScaleReading = SOTR.Calculus._Torvane.scaleReading;
            tvVaneValue = SOTR.Calculus._Torvane.vaneBlade;
            //PP
            ppUnit = SOTR.Calculus.PP.ppUnit;
            ppShoe = SOTR.Calculus.PP.ppShoe;
            ppScaleReading = SOTR.Calculus.PP.scaleReading;

            /*prevent re render*/
            AllowEdit = false;
            StateHasChanged();
        }
        else if(Title == "")
        {
            Title = "Add New Test Result";
            AllowEdit = false;
            ClearAll();
            StateHasChanged();
        }
    }

    //unit weight
    private void GetUWParameters()
    {
        if(SOTR.Calculus.UnitWeightParamList.Count > 0)
        {
            selectedUW = SOTR.Calculus.UnitWeightParamList[0];
        }
        else
        {
            selectedUW = ("","",0,0,0,0,0,0,0,0,0,0,0);
        }
    }
    private void SetUWParameters()
    {
        containerLabel = selectedUW.containerLabel.ToString();
        weightOfRingInGrams = selectedUW.weightOfRingInGram.ToString();
        weightOfRingAndWetSampleInGrams = selectedUW.weightOfRingAndWetSampleInGram.ToString();
        weightOfRingAndDrySampleInGrams = selectedUW.weightOfRingAndDrySampleInGram.ToString();
        diameterOfRingInMillimeter = selectedUW.diameterOfRingInMillimeter.ToString();
        heightOfRingInMillimeter = selectedUW.heightOfRingInMillimeter.ToString();
        uwDepth = selectedUW.depth.ToString();
    }
    private void AddUW()
    {

        if(selectedUW.bulkUnitWeightInKNm3 == 0 || selectedUW.dryUnitWeightInKNm3 == 0)
        {
            ComputeUW();
        }
        OnUWParameterChange(new ChangeEventArgs { Value = ""});
        msg = "";
    }
    private void RemoveUW()
    {
        if(selectedUW.id != "")
        {
            double selectedDepth = selectedUW.depth;
            var uwList = SOTR.Calculus.UnitWeightParamList;
            uwList = uwList.Where(d => d.id != selectedUW.id).ToList();
            SOTR.Calculus.UnitWeightParamList = uwList;   
            OnNmcParameterChange(new ChangeEventArgs { Value = ""});
            msg = $"you removed unit weight parameter : {selectedDepth}m";
            msgClass = "red";
        }
        else{msg = ""; msgClass = "";}
    }
    private void OnUWParameterChange(ChangeEventArgs e)
    {
        string id = e.Value?.ToString() ?? "";
        if(id == "")
        {
            selectedUW = ("","",0,0,0,0,0,0,0,0,0,0,0);
            ClearUWParams();
        }
        else
        {
            selectedUW = SOTR.Calculus.UnitWeightParamList.FirstOrDefault(x => x.id == id);
            SetUWParameters();
        }
        msg = "";
    }
    private void ComputeUW()
    {
        double wrg; double wrwsg = 0; double wrdsg = 0; double depth;double d; double h;
        if(selectedUW.id == ""){selectedUW.id = Guid.NewGuid().ToString();}
        if(double.TryParse(weightOfRingInGrams, out wrg) && double.TryParse(weightOfRingAndWetSampleInGrams, out wrwsg) &&
            double.TryParse(weightOfRingAndDrySampleInGrams, out wrdsg) && double.TryParse(uwDepth, out depth) &&
            double.TryParse(diameterOfRingInMillimeter,out d) && double.TryParse(heightOfRingInMillimeter,out h))
        {
            string id = selectedUW.id;
            double heightOfRingInCentimeter = h / 10;
            double diameterOfRingInCentimeter = d / 10;
            double halfDiameterCm = (diameterOfRingInCentimeter / 2);
            double volInMillimeter3 = Math.PI * Math.Pow((d/2),2) * h;
            double volInCentimeter3 = Math.PI * Math.Pow(halfDiameterCm,2) * heightOfRingInCentimeter;
            double bulkDensityIngramPerCm3 = (wrwsg - wrg) / volInCentimeter3;
            double dryDensityIngramPerCm3 = (wrdsg - wrg) / volInCentimeter3;
            double bulkDensityInKNm3 = bulkDensityIngramPerCm3 * 9.81;//g = 9.81
            double dryDensityInKNm3 = dryDensityIngramPerCm3 * 9.81;
            double submergedDensityInKNm3 = bulkDensityInKNm3 - 9.81;//density of water
            //(string id, string containerLabel, double depth, double weightOfRingInGram, double weightOfRingAndWetSampleInGram,double weightOfRingAndDrySampleInGram, double diameterOfRingInMillimeter, double heightOfRingInMillimeter, double volumeofRingInMillimeter, double bulkUnitWeightInKNm3, double dryUnitWeightInKNm3,submergedDensityInKNm3)
            selectedUW = (id,containerLabel,depth,wrg,wrwsg,wrdsg,d,h,volInMillimeter3,volInCentimeter3,bulkDensityInKNm3,dryDensityInKNm3,submergedDensityInKNm3);
            var uwList = SOTR.Calculus.UnitWeightParamList.Where(x => x.id != id).ToList() ?? new();;
            uwList.Add(selectedUW);
            SOTR.Calculus.UnitWeightParamList = uwList;
            msg = $"UW for {depth}m added. Click  v to view & edit";
            msgClass = "green";
        }
        else
        {
            msg = "Please Ensure all UW parameters are valid numbers only";
            msgClass = "red";
        }
    }
    private void ClearUWParams()
    {
        weightOfRingInGrams = "";
        weightOfRingAndWetSampleInGrams = "";
        weightOfRingAndDrySampleInGrams = "";
        diameterOfRingInMillimeter = "";
        heightOfRingInMillimeter = "";
        containerLabel = "";
        uwDepth = "";
    }

    //NMC Methods
    private void GetNmcParameters()
    {
        if(SOTR.Calculus.MoistureContentParamList.Count > 0)
        {
            selectedNmcParameters = SOTR.Calculus.MoistureContentParamList[0];
        }
        else
        {
            selectedNmcParameters = new("",0,0,0,0,0);
        }
    }
    private void SetNmcParameters()
    {
        weightOfRingNmc = selectedNmcParameters.weightOfRing.ToString();
        weightOfRingAndWetSampleNmc = selectedNmcParameters.weightOfRingAndWetSample.ToString();
        weightOfRingAndDrySampleNmc = selectedNmcParameters.weightOfRingAndDrySample.ToString();
        nmcDepth = selectedNmcParameters.depth.ToString();
    }
    private void ComputeNmc()
    {
        double wr; double wrws; double wrds;double d;
        if(selectedNmcParameters.id == ""){selectedNmcParameters.id = Guid.NewGuid().ToString();}
        if(double.TryParse(weightOfRingAndWetSampleNmc, out wrws) && double.TryParse(weightOfRingNmc, out wr) && double.TryParse(weightOfRingAndDrySampleNmc, out wrds) && double.TryParse(nmcDepth, out d))
        {
            string id  = selectedNmcParameters.id;
            double mc = (wrws - wrds) / (wrds - wr);
            double mcToPercent = mc * 100;
            double result = Math.Round(mcToPercent,2);
            selectedNmcParameters = (id,d,wr,wrws,wrds,result);
            var nmcParamsList = SOTR.Calculus.MoistureContentParamList.Where(x => x.id != id).ToList() ?? new();
            nmcParamsList.Add(selectedNmcParameters);
            SOTR.Calculus.MoistureContentParamList = nmcParamsList;
            msg = $"NMC for {d}m added. Click  v to view & edit";
            msgClass = "green";
        }
        else
        {
            msg = "Please Ensure all NMC parameters are valid numbers only";
            msgClass = "red";
        }
    }
    private void OnNmcParameterChange(ChangeEventArgs e)
    {
        string id = e.Value?.ToString() ?? "";
        if(id == "")
        {
            selectedNmcParameters = ("",0,0,0,0,0);
            ClearNMCParams();
        }
        else
        {
            selectedNmcParameters = SOTR.Calculus.MoistureContentParamList.FirstOrDefault(x => x.id == id);
            SetNmcParameters();
        }
        msg = "";
    }
    private void AddNmc()
    {

        if(selectedNmcParameters.result == 0)
        {
            ComputeNmc();
        }
        OnNmcParameterChange(new ChangeEventArgs { Value = ""});
        msg = "";
    }
    private void RemoveMmc()
    {
        if( selectedNmcParameters.id != "")
        {
            double selectedDepth = selectedNmcParameters.depth;
            var nmcList = SOTR.Calculus.MoistureContentParamList;
            nmcList = nmcList.Where(d => d.id != selectedNmcParameters.id).ToList();
            SOTR.Calculus.MoistureContentParamList = nmcList;

            OnNmcParameterChange(new ChangeEventArgs { Value = ""});
            msg = $"you removed nmc parameter : {selectedDepth}m";
            msgClass = "red";
        }
        else{msg = ""; msgClass = "";}
    }
    private void ClearNMCParams()
    {
        weightOfRingNmc = "";
        weightOfRingAndWetSampleNmc = "";
        weightOfRingAndDrySampleNmc = "";
        nmcDepth = "";
    }

    //Log Parameters
    private void AddBoreholeLog()
    {
        double bsd = 0; double bed = 0;
        if(selectedBoreholeLog.id == ""){selectedBoreholeLog.id = Guid.NewGuid().ToString();}
        if(double.TryParse(boreholeStartDepth, out bsd) && double.TryParse(boreholeEndDepth, out bed) && bsd < bed && boreholeStrata != "")
        {
            string id = selectedBoreholeLog.id;
            selectedBoreholeLog = (id,boreholeStrata,bsd,bed);
            //var bhList = SOTR.BoreholeLogList;
            var bhList = SOTR.BoreholeLogList.Where(x => x.id != id).ToList() ?? new();
            bhList.Add(selectedBoreholeLog);
            SOTR.BoreholeLogList = bhList;
            msg = $"{boreholeStrata} : {bsd} - {bed} added! click + to add new";
            msgClass = "";
        }
        else
        {
            msg = "log values must be positive, start depth must be less than end depth \n select borehole strata";
            msgClass = "red";
        }
    }
    private void AddLog()
    {
        if(selectedBoreholeLog.id == "" && (boreholeStartDepth != "" && boreholeEndDepth != ""))
        {
            AddBoreholeLog();
        }
        OnBHLogParameterChange(new ChangeEventArgs { Value = ""});
        msg = "";
    }
    private void RemoveLog()
    {
        if( selectedBoreholeLog.id != "")
        {
            string id = selectedBoreholeLog.id;
            var bhList = SOTR.BoreholeLogList;
            SOTR.BoreholeLogList = SOTR.BoreholeLogList.Where(d => d.id != selectedBoreholeLog.id).ToList();

            OnBHLogParameterChange(new ChangeEventArgs { Value = ""});
            msg = $"removed {selectedBoreholeLog.strata} {selectedBoreholeLog.startDepth} - {selectedBoreholeLog.endDepth} m";
            msgClass = "red";
        }
        else{msg = ""; msgClass = "";}
    }
    private void OnBHLogParameterChange(ChangeEventArgs e)
    {
        string id = e.Value?.ToString() ?? "";
        if(id == "")
        {
            selectedBoreholeLog = ("","",0,0);
            ClearBHLogParams();
        }
        else
        {
            selectedBoreholeLog = SOTR.BoreholeLogList.FirstOrDefault(x => x.id == id);
            SetBHLogParams();
        }
        msg = "";
    }
    private void ClearBHLogParams()
    {
        boreholeStartDepth = "";
        boreholeEndDepth = "";
        boreholeStrata = "";
    }
    private void SetBHLogParams()
    {
        boreholeStartDepth = selectedBoreholeLog.startDepth.ToString();
        boreholeEndDepth = selectedBoreholeLog.endDepth.ToString();
        boreholeStrata = selectedBoreholeLog.strata;
    }
    private void GetBHLogParams()
    {
        if(SOTR.BoreholeLogList.Count > 0)
        {
            selectedBoreholeLog = SOTR.BoreholeLogList[0];
            SetBHLogParams();
        }
        else{
            selectedBoreholeLog = ("","",0,0);
            ClearBHLogParams();
        }
    }
    private void ClearAll()
    {
        testId = "";
        sampleDrillOut = "";
        boringStartDepth = "";
        boringEndDepth = "";
        testType = "";
        containsCarbonate = "";
        showSampleImage = false;
        sampleImagePath = "";
        sampleDesc = "";
        samplingTool = "";
        subSampleCsv = "";
        subSampleIdCsv = "";
        /*wet unit weight/ bulk density*/
        selectedUW = ("","",0,0,0,0,0,0,0,0,0,0,0);
        ClearUWParams();
        //Nmc
        selectedNmcParameters = ("",0,0,0,0,0);
        ClearNMCParams();
        //logs
        selectedBoreholeLog = ("","",0,0);
        ClearBHLogParams();
        //Tv
        tvScaleReading = "";
        tvVaneValue = "";
        //pp
        ppUnit = "";
        ppShoe = "";
        ppScaleReading = "";
    }
    private async Task ChangeSelect(ElementReference selectElement, string id)
    {
        // Use JavaScript interop to set the value of the select element
        await jSRuntime.InvokeVoidAsync("setSelectValue", selectElement, id);
    }
}
